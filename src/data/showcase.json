[
  [
    {
      "url": "https://github.com/pysnippet/thumbnails",
      "repo": {
        "name": "thumbnails",
        "object": {
          "text": "# Thumbnails <img src=\"https://github.com/pysnippet.png\" align=\"right\" height=\"64\" />\n\n[![PyPI](https://img.shields.io/pypi/v/thumbnails.svg)](https://pypi.org/project/thumbnails/)\n[![Tests Ubuntu | MacOS](https://github.com/pysnippet/thumbnails/actions/workflows/tests.yml/badge.svg)](https://github.com/pysnippet/thumbnails/actions/workflows/tests.yml)\n[![Tests Windows](https://img.shields.io/circleci/build/gh/pysnippet/thumbnails?token=c63e2b94c69393ab3e47a0f20de802fe6265ecf4&label=Tests%20Windows&logo=circleci&logoColor=959da5&labelColor=3e464f)](https://app.circleci.com/pipelines/github/pysnippet/thumbnails)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/ab5414af4c9546fe97ad64365e2a66f0)](https://www.codacy.com?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=pysnippet/thumbnails&amp;utm_campaign=Badge_Grade)\n[![License](https://img.shields.io/pypi/l/thumbnails.svg)](https://github.com/pysnippet/thumbnails/blob/master/LICENSE)\n\nThis tool stands out for its unparalleled optimization for lightning-fast thumbnail generation. By utilizing minimal\nresources, you can generate more in less time. And with a user-friendly CLI and a convenient Python API, this tool is\nthe ultimate solution for efficient and streamlined thumbnail creation.\n\n## Compatible with Major Video Players\n\nModern web video players use the **WebVTT** formatted files to preview thumbnails at a pointed time.\n[WebVTT](https://www.w3.org/TR/webvtt1/) is a format for displaying timed text tracks (such as subtitles or captions).\nOpen-source video players such as [Plyr](https://github.com/sampotts/plyr), [Video.js](https://github.com/videojs/video.js),\n[Flowplayer](https://github.com/flowplayer/flowplayer), [Fluid Player](https://github.com/fluid-player/fluid-player),\nand more, use this format for showing the thumbnails. And, with the use of [external plugins](https://github.com/brightcove/videojs-thumbnails),\nVideo.js even has the capability to handle **JSON** formatted thumbnail metadata. This is where our tool comes in,\noffering the ability to generate the perfect thumbnails to match your needs.\n\n## Features\n\n- Wide-ranging video format compatibility, accommodating all major video formats as input files. (mp4, mkv, avi, mov, ogv, webm, mpeg, mpg, wmv, etc.)\n- Flexible output options, supporting both WebVTT and JSON formats.\n- Generating video thumbnails through the CLI and the Python API.\n- Customize your thumbnail creation to fit your specific needs with various options.\n- Image compression technology, ensuring optimized file sizes for quick and efficient loading times.\n\n## How to Use?\n\n### CLI Tool Usage\n\nThe CLI is a convenient way to generate thumbnails for a video file. And it accepts files or directories as arguments.\nFor the complete list of options, run `thumbnails --help`.\n\n```bash\nthumbnails --base /media/ --output /var/www/movie.com/media/thumbnails/ --interval 5 ~Videos/movies\n```\n\n### Python API Usage\n\nThe Python API provides a flexible way to integrate video thumbnail generation into your existing applications.\nBoth the CLI and the Python API share the same set of options.\n\n```python\nfrom thumbnails import Generator\n\ninputs = (\n    \"~Downloads/movie.mp4\",\n    \"~Videos/movies/1.avi\",\n    \"~Videos/movies/2.ogv\",\n)\n\ngenerator = Generator(inputs)\ngenerator.base = \"/media/\"\ngenerator.skip = True  # skip existing thumbnails\ngenerator.output = \"/var/www/movie.com/media/thumbnails/\"\ngenerator.interval = 5\ngenerator.generate()\n```\n\n## Development\n\nRun the following command in the package's root directory to install it in editable mode.\n```bash\npython3 -m pip install -e .\n```\nThis command will install the package in your local environment and allow you to make changes to the code and see the\nupdates immediately. It will also install all the required dependencies.\n\n## Contribute\n\nEveryone is welcome to contribute to this project. Please read and follow the [contribution guidelines](CONTRIBUTING.md)\nbefore you start. Contributions can be considered:\n- Reporting an issue\n- Opening a pull-request\n- Suggesting an idea at [discussions](https://github.com/pysnippet/thumbnails/discussions)\n- Starring the repository if you like it\n\nBefore you open a PR, please run the unit tests in the local environment to ensure everything is working. You need to\ninstall [tox](https://github.com/tox-dev/tox) and run the tests for configured environments.\n```bash\npython3 -m pip install tox && tox\n```\n\nIf you want to run tests only for the current environment with your local Python interpreter, you can use the following\ncommands.\n\n```bash\npython3 -m pip install -r tests/requirements.txt\npython3 -m pytest\n```\n\n## License\n\nCopyright (C) 2023 Artyom Vancyan. [Apache 2.0](https://github.com/pysnippet/thumbnails/blob/master/LICENSE)\n"
        },
        "mentionableUsers": {
          "totalCount": 1
        },
        "discussions": {
          "totalCount": 1
        },
        "nameWithOwner": "pysnippet/thumbnails",
        "description": "Video thumbnail generator for modern web video players such as Plyr, Videojs, Flowplayer, Fluid Player, etc.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/c7cee87890ab2e30ae7c663f57f9c99cb39648ea8192abad70fd546086360e7b/pysnippet/thumbnails",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/108220139?v=4",
          "login": "pysnippet"
        },
        "forkCount": 4,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 7,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/pysnippet/django-forbid",
      "repo": {
        "name": "django-forbid",
        "object": {
          "text": "# Django Forbid <img src=\"https://github.com/pysnippet.png\" align=\"right\" height=\"64\" />\n\nSecure your Django app by controlling the access - grant or deny user access based on device and location, including VPN\ndetection.\n\n[![PyPI](https://img.shields.io/pypi/v/django-forbid.svg)](https://pypi.org/project/django-forbid/)\n[![Python](https://img.shields.io/pypi/pyversions/django-forbid.svg?logoColor=white)](https://pypi.org/project/django-forbid/)\n[![Django](https://img.shields.io/pypi/djversions/django-forbid.svg?color=0C4B33&label=django)](https://pypi.org/project/django-forbid/)\n[![License](https://img.shields.io/pypi/l/django-forbid.svg)](https://github.com/pysnippet/django-forbid/blob/master/LICENSE)\n[![Tests](https://github.com/pysnippet/django-forbid/actions/workflows/tests.yml/badge.svg)](https://github.com/pysnippet/django-forbid/actions/workflows/tests.yml)\n\n## Install\n\n```shell\npython -m pip install django-forbid\n```\n\n## Configuration\n\nAdd the `django_forbid.apps.ForbidConfig` to your `INSTALLED_APPS` in your Django project's **settings.py** file.\n\n```python\nINSTALLED_APPS = [\n    ...,  # other apps\n    'django_forbid.apps.ForbidConfig',\n]\n```\n\nAlso, add the `django_forbid.middleware.ForbidMiddleware` to the `MIDDLEWARE` list of the project.\n\n```python\nMIDDLEWARE = [\n    ...,  # other middlewares\n    'django_forbid.middleware.ForbidMiddleware',\n]\n```\n\nConfiguring the `GEOIP_PATH` variable in your project's settings is important. This variable should contain the path to\nthe GeoLite2 database file. You should [download](https://dev.maxmind.com/geoip/geoip2/geolite2/) the database and\nfollow the Django [documentation](https://docs.djangoproject.com/en/2.1/ref/contrib/gis/geoip2/#settings) for proper\nconfiguration.\n\n## Usage\n\nAfter connecting the Django Forbid to your project, you can define the set of desired zones to be forbidden or allowed.\nAll you need is to set the `DJANGO_FORBID` variable in your project's settings. It should be a dictionary with the\nfollowing keys:\n\n- `DEVICES` - list of devices to permit or forbid access to\n- `COUNTRIES` - list of countries to permit or forbid access to\n- `TERRITORIES` - list of territories to permit or forbid access to\n- `OPTIONS` - a dictionary for additional settings\n    - `ACTION` - whether to `PERMIT` or `FORBID` access to the listed zones (default is `FORBID`)\n    - `PERIOD` - time in seconds to check for access again, 0 means on each request\n    - `VPN` - use VPN detection and forbid access to VPN users\n    - `URL` - set of URLs to redirect to when the user is located in a forbidden country or using a VPN\n        - `FORBIDDEN_LOC` - the URL to redirect to when the user is located in a forbidden country\n        - `FORBIDDEN_VPN` - the URL to redirect to when the user is using a VPN\n        - `FORBIDDEN_KIT` - the URL to redirect to when the user is using a forbidden device\n\nUnlike the `COUNTRIES` and `TERRITORIES`, where the middleware decides whether to permit or forbid access based on the\ngiven `ACTION` value, the `DEVICES` list accepts device types where the names starting with `!` are forbidden. This is\ndone to make it possible to make them all mix together.\n\n```python\n# Forbid access to all devices that have a small screen.\n'DEVICES': ['!car', '!player', '!peripheral', '!camera']\n\n# Allow access to all devices having regular or large screens.\n'DEVICES': ['desktop', 'smartphone', 'console', 'tablet', 'tv']\n```\n\nThe available device types are: `smartphone`, `peripheral` - refers to all hardware components that are attached to a\ncomputer, `wearable` - common types of wearable technology include smartwatches and smartglasses, `phablet` - a\nsmartphone having a larger screen, `console` - PlayStation, Xbox, etc., `display`, `speaker` - Google Assistant, Siri,\nAlexa, etc., `desktop`, `tablet`, `camera`, `player` - iPod, Sony Walkman, Creative Zen, etc., `phone`, `car` - refers\nto a car browser and `tv` - refers to TVs having internet access.\n\n```python\nDJANGO_FORBID = {\n    'DEVICES': ['desktop', 'smartphone', 'console', 'tablet', 'tv'],\n    'COUNTRIES': ['US', 'GB'],\n    'TERRITORIES': ['EU'],\n    'OPTIONS': {\n        'ACTION': 'PERMIT',\n        'PERIOD': 300,\n        'VPN': True,\n        'URL': {\n            'FORBIDDEN_LOC': 'forbidden_location',\n            'FORBIDDEN_VPN': 'forbidden_network',\n            'FORBIDDEN_KIT': 'forbidden_device',\n        },\n    },\n}\n```\n\nThe available country codes in the required ISO 3166 alpha-2 format are\nlisted [here](https://www.iban.com/country-codes). And the available continent codes (territories) are: `AF` -\nAfrica, `AN` - Antarctica, `AS` - Asia, `EU` - Europe, `NA` - North America, `OC` - Oceania and `SA` - South America.\n\n_None of the settings are required. If you don't specify any settings, the middleware will not do anything._\n\n## Contribute\n\nAny contribution is welcome. If you have any ideas or suggestions, feel free to open an issue or a pull request. And\ndon't forget to add tests for your changes.\n\n## License\n\nCopyright (C) 2023 Artyom Vancyan. [MIT](https://github.com/pysnippet/django-forbid/blob/master/LICENSE)\n"
        },
        "mentionableUsers": {
          "totalCount": 1
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "pysnippet/django-forbid",
        "description": "Secure your Django app by controlling the access - grant or deny user access based on device and location, including VPN detection.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/77bcf758a6e2f4b743fe21add3e5c703920d7430051c5a3e8f75ab41fe390a95/pysnippet/django-forbid",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/108220139?v=4",
          "login": "pysnippet"
        },
        "forkCount": 2,
        "issues": {
          "totalCount": 1
        },
        "stargazerCount": 8,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "HTML"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/ArtyomVancyan/antd-phone-input",
      "repo": {
        "name": "antd-phone-input",
        "object": {
          "text": "# Antd Phone Input\n\n[![npm](https://img.shields.io/npm/v/antd-phone-input)](https://www.npmjs.com/package/antd-phone-input)\n[![antd](https://img.shields.io/badge/antd-4.x%20%7C%205.x-blue)](https://github.com/ant-design/ant-design)\n[![types](https://img.shields.io/npm/types/antd-phone-input)](https://www.npmjs.com/package/antd-phone-input)\n[![License](https://img.shields.io/npm/l/antd-phone-input)](https://github.com/ArtyomVancyan/antd-phone-input/blob/master/LICENSE)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://makeapullrequest.com)\n[![Tests](https://github.com/ArtyomVancyan/antd-phone-input/actions/workflows/tests.yml/badge.svg)](https://github.com/ArtyomVancyan/antd-phone-input/actions/workflows/tests.yml)\n\nAdvanced phone input component for [Ant Design](https://github.com/ant-design/ant-design) that provides support for all\ncountries and is compatible with [`antd`](https://github.com/ant-design/ant-design) 4 and 5 versions. It has built-in\nsupport for area codes and provides validation to ensure that the entered numbers are valid. This open-source project\nis designed to simplify the process of collecting phone numbers from users.\n\n## Install\n\n```shell\nnpm i antd-phone-input\n```\n\n```shell\nyarn add antd-phone-input\n```\n\n## Usage\n\nThe latest version does not require any additional actions for loading the styles as it uses\nthe [`cssinjs`](https://github.com/ant-design/cssinjs) ecosystem.\n\n### Antd 5.x\n\n```javascript\nimport React from \"react\";\nimport FormItem from \"antd/es/form/FormItem\";\nimport PhoneInput from \"antd-phone-input\";\n\nconst Demo = () => {\n  return (\n    <FormItem name=\"phone\">\n      <PhoneInput enableSearch/>\n    </FormItem>\n  )\n}\n```\n\n![latest](https://user-images.githubusercontent.com/44609997/227775101-72b03e76-52bc-421d-8e75-a03c9d0d6d08.png)\n\n### Antd 4.x\n\nFor `4.x` versions, you should use the `legacy` endpoint.\n\n```javascript\nimport PhoneInput from \"antd-phone-input/legacy\";\n```\n\nFor including the styles, you should import them in the main `less` file after importing either\nthe `antd/dist/antd.less` or `antd/dist/antd.dark.less` styles.\n\n```diff\n@import \"~antd/dist/antd\";\n+ @import \"~antd-phone-input/legacy/style\";\n```\n\n![legacy](https://user-images.githubusercontent.com/44609997/227775155-9e22bc63-2148-4714-ba8a-9bb4e44c0128.png)\n\n## Value\n\nThe value of the component is an object containing the parts of a phone number. This format of value gives a wide range\nof opportunities for handling the data in your custom way. For example, you can easily merge the parts of the phone\nnumber into a single string.\n\n```json\n{\n  \"countryCode\": 1,\n  \"areaCode\": 702,\n  \"phoneNumber\": \"1234567\",\n  \"isoCode\": \"us\",\n  \"valid\": true\n}\n```\n\n## Validation\n\nThe `valid` property of the value object shows the real-time validity of the phone number depending on the country. So\nthis can be used in a `validator` like this:\n\n```javascript\nconst validator = (_, {valid}) => {\n  if (valid) {\n    return Promise.resolve();\n  }\n  return Promise.reject(\"Invalid phone number\");\n}\n\nreturn (\n  <FormItem rules={[{validator}]}>\n    <PhoneInput/>\n  </FormItem>\n)\n```\n\n## Props\n\n| Property           | Description                                                                                                                     | Type                |\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------|---------------------|\n| size               | Either `large`, `middle` or `small`. Default value is `middle`. See at ant [docs][antInputProps] for more.                      | string              |\n| value              | An object containing the parts of phone number. E.g. `value={{countryCode: 1, areaCode: 702, phoneNumber: \"1234567\"}}`.         | object              |\n| style              | Applies CSS styles to the container element.                                                                                    | CSSProperties       |\n| className          | The value will be assigned to the container element.                                                                            | string              |\n| disabled           | Disables the whole input component.                                                                                             | boolean             |\n| enableSearch       | Enables search in the country selection dropdown menu. Default value is `false`.                                                | boolean             |\n| disableDropdown    | Disables the manual country selection through the dropdown menu.                                                                | boolean             |\n| inputProps         | [HTML properties of input][htmlInputProps] to pass into the input.  E.g. `inputProps={{autoFocus: true}}`.                      | InputHTMLAttributes |\n| searchPlaceholder  | The value is shown if `enableSearch` is `true`. Default value is `search`.                                                      | string              |\n| searchNotFound     | The value is shown if `enableSearch` is `true` and the query does not match any country. Default value is `No entries to show`. | string              |\n| placeholder        | Custom placeholder. Default placeholder is `1 (702) 123-4567`.                                                                  | string              |\n| country            | Country code to be selected by default. By default, it will show the flag of the user's country.                                | string              |\n| regions            | Show only the countries of the specified regions. See the list of [available regions][reactPhoneRegions].                       | string[]            |\n| onlyCountries      | Country codes to be included in the list. E.g. `onlyCountries={['us', 'ca', 'uk']}`.                                            | string[]            |\n| excludeCountries   | Country codes to be excluded from the list of countries. E.g. `excludeCountries={['us', 'ca', 'uk']}`.                          | string[]            |\n| preferredCountries | Country codes to be at the top of the list. E.g. `preferredCountries={['us', 'ca', 'uk']}`.                                     | string[]            |\n| onChange           | Callback when the user is inputting. See at ant [docs][antInputProps] for more.                                                 | function(value, e)  |\n| onPressEnter       | The callback function that is triggered when <kbd>Enter</kbd> key is pressed.                                                   | function(e)         |\n| onFocus            | The callback is triggered when the input element is focused.                                                                    | function(e, value)  |\n| onClick            | The callback is triggered when the user clicks on the input element.                                                            | function(e, value)  |\n| onBlur             | The callback is triggered when the input element gets blurred or unfocused.                                                     | function(e, value)  |\n| onKeyDown          | The callback is triggered when any key is pressed down.                                                                         | function(e)         |\n| onMount            | The callback is triggered once the component gets mounted.                                                                      | function(e)         |\n\n## Contribute\n\nAny contribution is welcome. If you have any ideas or suggestions, feel free to open an issue or a pull request. And\ndon't forget to add tests for your changes.\n\n## License\n\nCopyright (C) 2023 Artyom Vancyan. [MIT](LICENSE)\n\n[antInputProps]:https://ant.design/components/input#input\n\n[reactPhoneRegions]:https://github.com/bl00mber/react-phone-input-2#regions\n\n[htmlInputProps]:https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes\n"
        },
        "mentionableUsers": {
          "totalCount": 1
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "ArtyomVancyan/antd-phone-input",
        "description": "Advanced, highly customizable phone input component for Ant Design.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/f1e57adf8e64d4696568f653b02a33039af9e3ffc0336b4bf54c61301808c28d/ArtyomVancyan/antd-phone-input",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/44609997?v=4",
          "login": "ArtyomVancyan"
        },
        "forkCount": 0,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 1,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "TypeScript"
            },
            {
              "name": "Less"
            },
            {
              "name": "CSS"
            }
          ]
        }
      }
    }
  ],
  [
    {
      "url": "https://github.com/fabiocaccamo/FCUUID",
      "repo": {
        "name": "FCUUID",
        "object": {
          "text": "FCUUID ![Pod version](http://img.shields.io/cocoapods/v/FCUUID.svg) ![Pod platforms](http://img.shields.io/cocoapods/p/FCUUID.svg) ![Pod license](http://img.shields.io/cocoapods/l/FCUUID.svg)\n===================\niOS **UUID** library as alternative to the old good **UDID** and **identifierForVendor**.\nThis library provides the simplest API to obtain **universally unique identifiers with different levels of [persistence](#persistence)**.\n\nIt's possible to retrieve the **UUIDs created for all devices of the same user**, in this way with a little bit of server-side help **it's possible manage guest accounts across multiple devices easily.**\n\n## Requirements & dependencies\n- iOS >= 5.0\n- ARC enabled\n- Key-value storage enabled *(target / Capabilities / iCloud / Key-value storage)*\n- Security.framework\n- [UICKeyChainStore](https://github.com/kishikawakatsumi/UICKeyChainStore)\n- ***(optional)*** - Key-value storage enabled -> Target / Capabilities / iCloud / Key-value storage enabled if you want to **share** `uuidsOfUserDevices` values **across multiple devices using the same iCloud account**.\n- ***(optional)*** - KeyChain sharing enabled (entitlements and provisioning profile) if you need to **share** the same `uuidForDevice` / `uuidsOfUserDevices` values **across multiple apps with the same bundle seed**.\n\n## Installation\n\n#### CocoaPods:\n`pod 'FCUUID'`\n\n#### [Swift Package Manager](https://github.com/apple/swift-package-manager):\n1. File > Swift Packages > Add Package Dependency\n2. Add https://github.com/fabiocaccamo/FCUUID\n3. Select \"Up to Next Major\" with \"1.0.0\"\n\n#### [Carthage](https://github.com/Carthage/Carthage):\n\n```ogdl\ngithub \"fabiocaccamo/FCUUID\"\n```\n\n#### Manual install:\n- Copy `FCUUID` folder to your project.\n- Manual install [UICKeyChainStore](https://github.com/kishikawakatsumi/UICKeyChainStore)\n\n### Optional setup:\nIt is recommended to do the setup in `applicationDidFinishLaunchingWithOptions` method.\n- Add an observer to the `FCUUIDsOfUserDevicesDidChangeNotification` to be notified about uuids of user devices changes.\n- If necessary, **migrate from a previously used UUID or UDID** using one of the migrations methods listed in the API section (it's recommended to do migration before calling `uuidForDevice` or `uuidsForUserDevices` methods). Keep in mind that **migration works only if the existing value is a valid uuid and `uuidForDevice` has not been created yet**.\n- Call any class method to enforce iCloud sync.\n\n## API\n**Get different UUIDs** (each one with its own persistency level)\n\n```objective-c\n//changes each time (no persistent)\n+(NSString *)uuid;\n\n//changes each time (no persistent), but allows to keep in memory more temporary uuids\n+(NSString *)uuidForKey:(id<NSCopying>)key;\n\n//changes each time the app gets launched (persistent to session)\n+(NSString *)uuidForSession;\n\n//changes each time the app gets installed (persistent to installation)\n+(NSString *)uuidForInstallation;\n\n//changes each time all the apps of the same vendor are uninstalled (this works exactly as identifierForVendor)\n+(NSString *)uuidForVendor;\n\n//changes only on system reset, this is the best replacement to the good old udid (persistent to device)\n+(NSString *)uuidForDevice;\n//or\n#import \"UIDevice+FCUUID.h\"\n[[UIDevice currentDevice] uuid];\n```\n**Get the list of UUIDs of user devices**\n```objective-c\n//returns the list of all uuidForDevice of the same user, in this way it's possible manage guest accounts across multiple devices easily\n+(NSArray *)uuidsOfUserDevices;\n```\n**Migrate from a previously stored UUID / UDID**\nBefore migrating an existing value it's recommended to **debug it** by simply passing `commitMigration:NO` and logging the returned value.\nWhen you will be ready for committing the migration, use `commitMigration:YES`.\nAfter the migration, any future call to `uuidForDevice` will return the migrated value.\n```objective-c\n//these methods search for an existing UUID / UDID stored in the KeyChain or in UserDefaults for the given key / service / access-group\n+(NSString *)uuidForDeviceMigratingValue:(NSString *)value commitMigration:(BOOL)commitMigration;\n+(NSString *)uuidForDeviceMigratingValueForKey:(NSString *)key commitMigration:(BOOL)commitMigration;\n+(NSString *)uuidForDeviceMigratingValueForKey:(NSString *)key service:(NSString *)service commitMigration:(BOOL)commitMigration;\n+(NSString *)uuidForDeviceMigratingValueForKey:(NSString *)key service:(NSString *)service accessGroup:(NSString *)accessGroup commitMigration:(BOOL)commitMigration;\n```\n**Check if value is a valid UUID**\n```objective-c\n+(BOOL)uuidValueIsValid:(NSString *)uuidValue;\n```\n\n## Persistence\n- **`√`** *yes*\n- `-` *no*\n- **`*`** *read notes below*\n\n| PERSISTS              | App memory | App relaunch | Reset Advertising Identifier | App reinstall | System reboot | System upgrade | System reset |\n|-----------------------|:----------:|:------------:|:----------------------------:|:-------------:|:-------------:|:--------------:|:------------:|\n| `uuid`                |      -     |       -      |               -              |       -       |       -       |        -       |       -      |\n| `uuidForKey:key`      |    **√**   |       -      |               -              |       -       |       -       |        -       |       -      |\n| `uuidForSession`      |    **√**   |       -      |               -              |       -       |       -       |        -       |       -      |\n| `uuidForInstallation` |    **√**   |     **√**    |             **√**            |       -       |     **√**     |        -       |       -      |\n| `uuidForVendor`       |    **√**   |     **√**    |               -              |     **√***    |     **√**     |        -       |       -      |\n| `uuidForDevice`       |    **√**   |     **√**    |             **√**            |     **√**     |     **√**     |      **√**     |    **√****   |\n\n**(persists only if the user have not uninstalled all apps of the same vendor)*\n\n***(persists only if the user restores a device backup which includes also keychain's data)*\n\n## FAQ\n#### How can I share the device uuid between two apps?\nYou must have **KeyChain sharing enabled** (entitlements and provisioning profile) and your apps identifiers must have the same bundle seed.\n\n#### What happens if I call `uuidForDevice` on 2 different devices using same iCloud account and iCloud Keychain?\nYou will obtain 2 **different uuid(s)**, and if you call `uuidsOfUserDevices` you will obtain a list containing the uuids of both devices.\n\n#### When I reboot / upgrade / reset my device system, will device uuid change?\nPlease check the **persistence** table above.\n\n## Support development\n[![Donate](https://www.paypalobjects.com/webstatic/en_US/btn/btn_donate_pp_142x27.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=fabio%2ecaccamo%40gmail%2ecom&lc=IT&item_name=Fabio%20Caccamo%20%2d%20Open%20Source%20Projects&item_number=FCUUID&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted)\n\n## License\nReleased under [MIT License](LICENSE).\n"
        },
        "mentionableUsers": {
          "totalCount": 4
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/FCUUID",
        "description": ":iphone: :id: iOS UUID / Universally Unique Identifiers library as alternative to UDID and identifierForVendor.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/e767bf4d76aab0ef5c7e2901a32e5801f37eb72166b59f339d2c1d584b4111cb/fabiocaccamo/FCUUID",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 225,
        "issues": {
          "totalCount": 2
        },
        "stargazerCount": 1554,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Objective-C"
            },
            {
              "name": "Ruby"
            },
            {
              "name": "Swift"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-admin-interface",
      "repo": {
        "name": "django-admin-interface",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-admin-interface.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-admin-interface?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-admin-interface.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-admin-interface/)\n[![](https://pepy.tech/badge/django-admin-interface/month)](https://pepy.tech/project/django-admin-interface)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-admin-interface?logo=github)](https://github.com/fabiocaccamo/django-admin-interface/stargazers)\n[![](https://img.shields.io/pypi/l/django-admin-interface.svg?color=blue)](https://github.com/fabiocaccamo/django-admin-interface/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-admin-interface/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-admin-interface/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-admin-interface/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-admin-interface)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-admin-interface?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-admin-interface)\n[![](https://img.shields.io/codacy/grade/21cb657283c04e70b56fb935277a1ad1?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-admin-interface)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-admin-interface?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-admin-interface/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-admin-interface\ndjango-admin-interface is a modern **responsive flat admin interface customizable by the admin itself**.\n\n![django-admin-interface-preview](https://user-images.githubusercontent.com/1035294/35631521-64b0cab8-06a4-11e8-8f57-c04fdfbb7e8b.gif)\n\n## Features\n- Beautiful default **django-theme**\n- Themes management and customization *(you can **customize admin title, logo and colors**)*\n- Responsive\n- Related modal *(instead of the old popup window)*\n- Environment name/marker\n- Language chooser\n- Foldable apps *(accordions in the navigation bar)*\n- [Collapsible fieldsets](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets) can have their initial state expanded instead of collapsed\n- `NEW` Collapsible inlines\n- `NEW` Tabbed fieldsets and inlines\n- `NEW` List filter removal links\n- `NEW` List filter highlight selected options\n- List filter dropdown\n- List filter sticky\n- Form controls sticky *(pagination and save/delete buttons)*\n- Compatibility / style optimizations for:\n  - `django-ckeditor`\n  - `django-dynamic-raw-id`\n  - `django-json-widget`\n  - `django-modeltranslation`\n  - `django-rangefilter`\n  - `django-streamfield`\n  - `django-tabbed-admin`\n  - `sorl-thumbnail`\n- Translated in many languages: `de`, `es`, `fa`, `fr`, `it`, `pl`, `pt_BR`, `tr`\n\n## Installation\n- Run `pip install django-admin-interface`\n- Add `admin_interface` and `colorfield` to `settings.INSTALLED_APPS` **before** `django.contrib.admin`\n```python\nINSTALLED_APPS = (\n    #...\n    \"admin_interface\",\n    \"colorfield\",\n    #...\n    \"django.contrib.admin\",\n    #...\n)\n\nX_FRAME_OPTIONS = \"SAMEORIGIN\"\nSILENCED_SYSTEM_CHECKS = [\"security.W019\"]\n```\n- Run `python manage.py migrate`\n- Run `python manage.py collectstatic --clear`\n- Restart your application server\n\n> **Warning** - if you want use modals instead of popup windows, ensure to add `X_FRAME_OPTIONS = \"SAMEORIGIN\"` setting.\n\n### Optional features\nTo make a fieldset start expanded with a `Hide` button to collapse, add the class `\"expanded\"` to its classes:\n```python\nclass MyModelAdmin(admin.ModelAdmin):\n    # ...\n    fieldsets = [\n        (\"Section title\", {\n            \"classes\": (\"collapse\", \"expanded\"),\n            \"fields\": (...),\n        }),\n    ]\n    # ...\n```\n\n## Optional themes\nThis package ships with optional themes as fixtures, they can be installed using the [loaddata admin command](https://docs.djangoproject.com/en/1.11/ref/django-admin/#django-admin-loaddata). Optional themes are activated on installation.\n\n##### [Django](https://www.djangoproject.com/) theme (default):\nRun `python manage.py loaddata admin_interface_theme_django.json`\n\n##### [Bootstrap](http://getbootstrap.com/) theme:\nRun `python manage.py loaddata admin_interface_theme_bootstrap.json`\n\n##### [Foundation](http://foundation.zurb.com/) theme:\nRun `python manage.py loaddata admin_interface_theme_foundation.json`\n\n##### [U.S. Web Design Standards](https://standards.usa.gov/) theme:\nRun `python manage.py loaddata admin_interface_theme_uswds.json`\n\n### Add more themes\nYou can add a theme you've created through the admin to this repository by [sending us a PR](http://makeapullrequest.com/). Here are the steps to follow to add:\n\n1. Export your exact theme as fixture using the `dumpdata` admin command:\n`python manage.py dumpdata admin_interface.Theme --indent 4 -o admin_interface_theme_{{name}}.json --pks=N`\n\n2. Copy the generated json file into the fixtures folder *(making sure its name starts with* `admin_interface_theme_` *to avoid clashes with fixtures that might be provided by other third party apps)*.\n\n3. Remove the `pk` from the fixture and make sure the `active` field is set to `true` *(in this way a theme is automatically activated when installed)*.\n\n4. Edit the section above to document your theme.\n\n### Add theme support to third-party libraries\nYou can add **theme support to existing third-party libraries** using the following **CSS variables**:\n\n#### Header\n\n- `--admin-interface-header-background-color`\n- `--admin-interface-header-text-color`\n- `--admin-interface-header-link-color`\n- `--admin-interface-header-link_hover-color`\n- `--admin-interface-title-color`\n- `--admin-interface-env-color`\n\n#### Logo\n\n- `--admin-interface-logo-color`\n- `--admin-interface-logo-default-background-image`\n- `--admin-interface-logo-max-width`\n- `--admin-interface-logo-max-height`\n\n#### Modules / Links\n- `--admin-interface-module-background-color`\n- `--admin-interface-module-background-selected-color`\n- `--admin-interface-module-border-radius`\n- `--admin-interface-module-text-color`\n- `--admin-interface-module-link-color`\n- `--admin-interface-module-link-selected-color`\n- `--admin-interface-module-link-hover-color`\n- `--admin-interface-generic-link-color`\n- `--admin-interface-generic-link-hover-color`\n- `--admin-interface-generic-link-active-color`\n\n#### Buttons\n- `--admin-interface-save-button-background-color`\n- `--admin-interface-save-button-background-hover-color`\n- `--admin-interface-save-button-text-color`\n- `--admin-interface-delete-button-background-color`\n- `--admin-interface-delete-button-background-hover-color`\n- `--admin-interface-delete-button-text-color`\n\n#### Related Modal\n- `--admin-interface-related-modal-background-color`\n- `--admin-interface-related-modal-background-opacity`\n- `--admin-interface-related-modal-border-radius`\n- `--admin-interface-related-modal-close-button-display`\n\n## Screenshots\n###### Admin login\n![django-admin-interface_login](https://cloud.githubusercontent.com/assets/1035294/11240233/55c8d4ba-8df1-11e5-9568-00fdc987ede8.gif)\n---\n###### Admin dashboard\n![django-admin-interface_dashboard](https://cloud.githubusercontent.com/assets/1035294/11240239/627c0362-8df1-11e5-81fa-216366a5d8da.gif)\n---\n###### Admin themes management\n![django-admin-interface_themes_management](https://cloud.githubusercontent.com/assets/1035294/11240245/6cd1c342-8df1-11e5-928b-f22217474d3d.gif)\n---\n###### Admin theme customization\n![django-admin-interface_theme_customization](https://cloud.githubusercontent.com/assets/1035294/11240250/7350d942-8df1-11e5-9b28-f2f54c333cdc.gif)\n\n## Localization\nAt the moment, this package has been translated into the following languages: `de`, `es`, `fa`, `fr`, `it`, `pl`, `pt_BR`, `tr`.\n\n### Translate into another language\n\n- Run `python -m django makemessages --ignore \".tox\" --ignore \"venv\" --add-location \"file\" --extension \"html,py\" --locale \"it\"` *(example for Italian localization)*\n\n- Update translations in `admin_interface/locale/it/LC_MESSAGES/django.po`\n\n- Run `python -m django compilemessages --ignore \".tox\" --ignore \"venv\"`\n\n### Update translations\n\nIf you do some changes to the project, remember to update translations, because if the translations files are not up-to-date, the `lint` step in the CI will fail:\n- Run `tox -e translations`\n\n## FAQ\n\n### Custom `base-site.html`\n> I already have a custom `base_site.html`, how can I make it work?\n\nYou can use [django-apptemplates](https://github.com/bittner/django-apptemplates), then add `{% extends \"admin_interface:admin/base_site.html\" %}` to your `base_site.html`\n\n### Language Chooser not showing\n> I have enabled the **Language Chooser**, but it is not visible in the admin, what should I do?\n\nYou must configure multilanguage `settings` and `urls` correctly:\n```python\nLANGUAGES = (\n    (\"en\", _(\"English\")),\n    (\"it\", _(\"Italiano\")),\n    (\"fr\", _(\"Français\")),\n    # more than one language is expected here\n)\nLANGUAGE_CODE = \"en\"\nUSE_I18N = True\nMIDDLEWARE = [\n    # ...\n    \"django.middleware.locale.LocaleMiddleware\",\n    # ...\n]\n```\n\n```python\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.contrib import admin\nfrom django.urls import include, path\n\n# ...\n\nurlpatterns = [\n    path(\"i18n/\", include(\"django.conf.urls.i18n\")),\n]\nurlpatterns += i18n_patterns(path(\"admin/\", admin.site.urls))\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-admin-interface.git && cd django-admin-interface\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## Contributing\nContributions are always welcome, please follow these steps for submitting good quality PRs:\n\n- :exclamation: **Open an issue**, please don't submit any PR that doesn't refer to an existing issue.\n- :computer: **Work on changes**, changes should *preferably* be covered by tests to avoid regressions in the future.\n- :globe_with_meridians: **Update the translations** files.\n- :test_tube: **Run tests** ensuring that there are no errors.\n- :inbox_tray: **Submit a pull-request** and mark it as **\"Ready for review\"** only if it passes the `CI`.\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-admin-interface)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 25
        },
        "discussions": {
          "totalCount": 8
        },
        "nameWithOwner": "fabiocaccamo/django-admin-interface",
        "description": ":superhero: :zap: django's default admin interface with superpowers - customizable themes, popup windows replaced by modals and many other features.",
        "openGraphImageUrl": "https://repository-images.githubusercontent.com/44974847/3480ec80-5ed9-11ea-9ab8-afa0d6079a81",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 154,
        "issues": {
          "totalCount": 12
        },
        "stargazerCount": 1396,
        "pullRequests": {
          "totalCount": 2
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "HTML"
            },
            {
              "name": "JavaScript"
            },
            {
              "name": "CSS"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/python-benedict",
      "repo": {
        "name": "python-benedict",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/python-benedict.svg?color=blue&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/python-benedict.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/python-benedict/)\n[![](https://pepy.tech/badge/python-benedict/month)](https://pepy.tech/project/python-benedict)\n[![](https://img.shields.io/github/stars/fabiocaccamo/python-benedict?logo=github)](https://github.com/fabiocaccamo/python-benedict/stargazers)\n[![](https://img.shields.io/pypi/l/python-benedict.svg?color=blue)](https://github.com/fabiocaccamo/python-benedict/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/python-benedict/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/python-benedict/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/python-benedict/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/python-benedict?logo=codecov)](https://codecov.io/gh/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/python-benedict?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/python-benedict/)\n[![](https://img.shields.io/codacy/grade/0dbd5cc2089f4dce80a0e49e6822be3c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/scrutinizer/quality/g/fabiocaccamo/python-benedict?logo=scrutinizer)](https://scrutinizer-ci.com/g/fabiocaccamo/python-benedict/?branch=main)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\n# python-benedict\npython-benedict is a dict subclass with **keylist/keypath/keyattr** support, **I/O** shortcuts (`base64`, `csv`, `ini`, `json`, `pickle`, `plist`, `query-string`, `toml`, `xls`, `xml`, `yaml`) and many **utilities**... for humans, obviously.\n\n## Features\n-   100% **backward-compatible**, you can safely wrap existing dictionaries.\n-   `NEW` **Keyattr** support for get/set items using **keys as attributes**.\n-   **Keylist** support using **list of keys** as key.\n-   **Keypath** support using **keypath-separator** *(dot syntax by default)*.\n-   Keypath **list-index** support  *(also negative)* using the standard `[n]` suffix.\n-   Normalized **I/O operations** with most common formats: `base64`, `csv`, `ini`, `json`, `pickle`, `plist`, `query-string`, `toml`, `xls`, `xml`, `yaml`.\n-   Multiple **I/O operations** backends: `file-system` *(read/write)*, `url` *(read-only)*, `s3` *(read/write)*.\n-   Many **utility** and **parse methods** to retrieve data as needed *(check the [API](#api) section)*.\n-   Well **tested**. ;)\n\n## Index\n-   [Installation](#installation)\n    -   [Optional Requirements](#optional-requirements)\n-   [Usage](#usage)\n    -   [Basics](#basics)\n    -   [Keyattr](#keyattr) `my_dict.x.y.z`\n    -   [Keylist](#keylist) `my_dict[\"x\", \"y\", \"z\"]`\n    -   [Keypath](#keypath) `my_dict[\"x.y.z\"]`\n        -   [Custom keypath separator](#custom-keypath-separator)\n        -   [Change keypath separator](#change-keypath-separator)\n        -   [Disable keypath functionality](#disable-keypath-functionality)\n        -   [List index support](#list-index-support)\n    -   [API](#api)\n        -   [Utility methods](#utility-methods)\n        -   [I/O methods](#io-methods)\n        -   [Parse methods](#parse-methods)\n-   [Testing](#testing)\n-   [License](#license)\n\n## Installation\nIf you want to install **everything**:\n-   Run `pip install \"python-benedict[all]\"`\n\nalternatively you can install the main package:\n-   Run `pip install python-benedict`, then install only the [optional requirements](#optional-requirements) you need.\n\n### Optional Requirements\nHere the hierarchy of possible installation targets available when running `pip install \"python-benedict[...]\"` *(each target installs all its sub-targets)*:\n- `[all]`\n    - `[io]`\n        - `[toml]`\n        - `[xls]`\n        - `[xml]`\n        - `[yaml]`\n    - `[s3]`\n\n## Usage\n\n### Basics\n`benedict` is a `dict` subclass, so it is possible to use it as a normal dictionary *(you can just cast an existing dict)*.\n\n```python\nfrom benedict import benedict\n\n# create a new empty instance\nd = benedict()\n\n# or cast an existing dict\nd = benedict(existing_dict)\n\n# or create from data source (filepath, url or data-string) in a supported format:\n# Base64, CSV, JSON, TOML, XML, YAML, query-string\nd = benedict(\"https://localhost:8000/data.json\", format=\"json\")\n\n# or in a Django view\nparams = benedict(request.GET.items())\npage = params.get_int(\"page\", 1)\n```\n\n### Keyattr\nIt is possible to get/set items using **keys as attributes** (dotted notation).\n\n```python\nd = benedict(keyattr_dynamic=True) # default False\nd.profile.firstname = \"Fabio\"\nd.profile.lastname = \"Caccamo\"\nprint(d) # -> { \"profile\":{ \"firstname\":\"Fabio\", \"lastname\":\"Caccamo\" } }\n```\n\nBy default, if the `keyattr_dynamic` is not explicitly set to `True`, this functionality works for get/set only already existing items.\n\n#### Disable keyattr functionality\nYou can disable the keyattr functionality passing `keyattr_enabled=False` option in the constructor.\n\n```python\nd = benedict(existing_dict, keyattr_enabled=False) # default True\n```\n\nor using the `getter/setter` property.\n\n```python\nd.keyattr_enabled = False\n```\n\n#### Dynamic keyattr functionality\nYou can enable the dynamic attributes access functionality passing `keyattr_dynamic=True` in the constructor.\n\n```python\nd = benedict(existing_dict, keyattr_dynamic=True) # default False\n```\n\nor using the `getter/setter` property.\n\n```python\nd.keyattr_dynamic = True\n```\n\n> **Warning** - even if this feature is very useful, it has some obvious limitations: it works only for string keys that are *unprotected* (not starting with an `_`) and that don't clash with the currently supported methods names.\n\n### Keylist\nWherever a **key** is used, it is possible to use also a **list (or a tuple) of keys**.\n\n```python\nd = benedict()\n\n# set values by keys list\nd[\"profile\", \"firstname\"] = \"Fabio\"\nd[\"profile\", \"lastname\"] = \"Caccamo\"\nprint(d) # -> { \"profile\":{ \"firstname\":\"Fabio\", \"lastname\":\"Caccamo\" } }\nprint(d[\"profile\"]) # -> { \"firstname\":\"Fabio\", \"lastname\":\"Caccamo\" }\n\n# check if keypath exists in dict\nprint([\"profile\", \"lastname\"] in d) # -> True\n\n# delete value by keys list\ndel d[\"profile\", \"lastname\"]\nprint(d[\"profile\"]) # -> { \"firstname\":\"Fabio\" }\n```\n\n### Keypath\n`.` is the default keypath separator.\n\nIf you cast an existing dict and its keys contain the keypath separator a `ValueError` will be raised.\n\nIn this case you should use a [custom keypath separator](#custom-keypath-separator) or [disable keypath functionality](#disable-keypath-functionality).\n\n```python\nd = benedict()\n\n# set values by keypath\nd[\"profile.firstname\"] = \"Fabio\"\nd[\"profile.lastname\"] = \"Caccamo\"\nprint(d) # -> { \"profile\":{ \"firstname\":\"Fabio\", \"lastname\":\"Caccamo\" } }\nprint(d[\"profile\"]) # -> { \"firstname\":\"Fabio\", \"lastname\":\"Caccamo\" }\n\n# check if keypath exists in dict\nprint(\"profile.lastname\" in d) # -> True\n\n# delete value by keypath\ndel d[\"profile.lastname\"]\n```\n\n#### Custom keypath separator\nYou can customize the keypath separator passing the `keypath_separator` argument in the constructor.\n\nIf you pass an existing dict to the constructor and its keys contain the keypath separator an `Exception` will be raised.\n\n```python\nd = benedict(existing_dict, keypath_separator=\"/\")\n```\n\n#### Change keypath separator\nYou can change the `keypath_separator` at any time using the `getter/setter` property.\n\nIf any existing key contains the new `keypath_separator` an `Exception` will be raised.\n\n```python\nd.keypath_separator = \"/\"\n```\n\n#### Disable keypath functionality\nYou can disable the keypath functionality passing `keypath_separator=None` option in the constructor.\n\n```python\nd = benedict(existing_dict, keypath_separator=None)\n```\n\nor using the `getter/setter` property.\n\n```python\nd.keypath_separator = None\n```\n\n#### List index support\nList index are supported, keypaths can include indexes *(also negative)* using `[n]`, to perform any operation very fast:\n\n```python\n# Eg. get last location cordinates of the first result:\nloc = d[\"results[0].locations[-1].coordinates\"]\nlat = loc.get_decimal(\"latitude\")\nlng = loc.get_decimal(\"longitude\")\n```\n\n### API\n\n-   **Utility methods**\n\n    -   [`clean`](#clean)\n    -   [`clone`](#clone)\n    -   [`dump`](#dump)\n    -   [`filter`](#filter)\n    -   [`find`](#find)\n    -   [`flatten`](#flatten)\n    -   [`groupby`](#groupby)\n    -   [`invert`](#invert)\n    -   [`items_sorted_by_keys`](#items_sorted_by_keys)\n    -   [`items_sorted_by_values`](#items_sorted_by_values)\n    -   [`keypaths`](#keypaths)\n    -   [`match`](#match)\n    -   [`merge`](#merge)\n    -   [`move`](#move)\n    -   [`nest`](#nest)\n    -   [`remove`](#remove)\n    -   [`rename`](#rename)\n    -   [`search`](#search)\n    -   [`standardize`](#standardize)\n    -   [`subset`](#subset)\n    -   [`swap`](#swap)\n    -   [`traverse`](#traverse)\n    -   [`unflatten`](#unflatten)\n    -   [`unique`](#unique)\n\n-   **I/O methods**\n\n    -   [`from_base64`](#from_base64)\n    -   [`from_csv`](#from_csv)\n    -   [`from_ini`](#from_ini)\n    -   [`from_json`](#from_json)\n    -   [`from_pickle`](#from_pickle)\n    -   [`from_plist`](#from_plist)\n    -   [`from_query_string`](#from_query_string)\n    -   [`from_toml`](#from_toml)\n    -   [`from_xls`](#from_xls)\n    -   [`from_xml`](#from_xml)\n    -   [`from_yaml`](#from_yaml)\n    -   [`to_base64`](#to_base64)\n    -   [`to_csv`](#to_csv)\n    -   [`to_ini`](#to_ini)\n    -   [`to_json`](#to_json)\n    -   [`to_pickle`](#to_pickle)\n    -   [`to_plist`](#to_plist)\n    -   [`to_query_string`](#to_query_string)\n    -   [`to_toml`](#to_toml)\n    -   [`to_xml`](#to_xml)\n    -   [`to_yaml`](#to_yaml)\n\n-   **Parse methods**\n\n    -   [`get_bool`](#get_bool)\n    -   [`get_bool_list`](#get_bool_list)\n    -   [`get_date`](#get_date)\n    -   [`get_date_list`](#get_date_list)\n    -   [`get_datetime`](#get_datetime)\n    -   [`get_datetime_list`](#get_datetime_list)\n    -   [`get_decimal`](#get_decimal)\n    -   [`get_decimal_list`](#get_decimal_list)\n    -   [`get_dict`](#get_dict)\n    -   [`get_email`](#get_email)\n    -   [`get_float`](#get_float)\n    -   [`get_float_list`](#get_float_list)\n    -   [`get_int`](#get_int)\n    -   [`get_int_list`](#get_int_list)\n    -   [`get_list`](#get_list)\n    -   [`get_list_item`](#get_list_item)\n    -   [`get_phonenumber`](#get_phonenumber)\n    -   [`get_slug`](#get_slug)\n    -   [`get_slug_list`](#get_slug_list)\n    -   [`get_str`](#get_str)\n    -   [`get_str_list`](#get_str_list)\n    -   [`get_uuid`](#get_uuid)\n    -   [`get_uuid_list`](#get_uuid_list)\n\n### Utility methods\n\nThese methods are common utilities that will speed up your everyday work.\n\nUtilities that accept key argument(s) also support keypath(s).\n\nUtilities that return a dictionary always return a new `benedict` instance.\n\n#### `clean`\n\n```python\n# Clean the current dict instance removing all empty values: None, \"\", {}, [], ().\n# If strings or collections (dict, list, set, tuple) flags are False,\n# related empty values will not be deleted.\nd.clean(strings=True, collections=True)\n```\n\n#### `clone`\n\n```python\n# Return a clone (deepcopy) of the dict.\nc = d.clone()\n```\n\n#### `dump`\n\n```python\n# Return a readable representation of any dict/list.\n# This method can be used both as static method or instance method.\ns = benedict.dump(d.keypaths())\nprint(s)\n# or\nd = benedict()\nprint(d.dump())\n```\n\n#### `filter`\n\n```python\n# Return a filtered dict using the given predicate function.\n# Predicate function receives key, value arguments and should return a bool value.\npredicate = lambda k, v: v is not None\nf = d.filter(predicate)\n```\n\n#### `find`\n\n```python\n# Return the first match searching for the given keys/keypaths.\n# If no result found, default value is returned.\nkeys = [\"a.b.c\", \"m.n.o\", \"x.y.z\"]\nf = d.find(keys, default=0)\n```\n\n#### `flatten`\n\n```python\n# Return a new flattened dict using the given separator to join nested dict keys to flatten keypaths.\nf = d.flatten(separator=\"_\")\n```\n\n#### `groupby`\n\n```python\n# Group a list of dicts at key by the value of the given by_key and return a new dict.\ng = d.groupby(\"cities\", by_key=\"country_code\")\n```\n\n#### `invert`\n\n```python\n# Return an inverted dict where values become keys and keys become values.\n# Since multiple keys could have the same value, each value will be a list of keys.\n# If flat is True each value will be a single value (use this only if values are unique).\ni = d.invert(flat=False)\n```\n\n#### `items_sorted_by_keys`\n\n```python\n# Return items (key/value list) sorted by keys.\n# If reverse is True, the list will be reversed.\nitems = d.items_sorted_by_keys(reverse=False)\n```\n\n#### `items_sorted_by_values`\n\n```python\n# Return items (key/value list) sorted by values.\n# If reverse is True, the list will be reversed.\nitems = d.items_sorted_by_values(reverse=False)\n```\n\n#### `keypaths`\n\n```python\n# Return a list of all keypaths in the dict.\n# If indexes is True, the output will include list values indexes.\nk = d.keypaths(indexes=False)\n```\n\n#### `match`\n\n```python\n# Return a list of all values whose keypath matches the given pattern (a regex or string).\n# If pattern is string, wildcard can be used (eg. [*] can be used to match all list indexes).\n# If indexes is True, the pattern will be matched also against list values.\nm = d.match(pattern, indexes=True)\n```\n\n#### `merge`\n\n```python\n# Merge one or more dictionary objects into current instance (deepupdate).\n# Sub-dictionaries keys will be merged together.\n# If overwrite is False, existing values will not be overwritten.\n# If concat is True, list values will be concatenated together.\nd.merge(a, b, c, overwrite=True, concat=False)\n```\n\n#### `move`\n\n```python\n# Move an item from key_src to key_dst.\n# It can be used to rename a key.\n# If key_dst exists, its value will be overwritten.\nd.move(\"a\", \"b\", overwrite=True)\n```\n\n#### `nest`\n\n```python\n# Nest a list of dicts at the given key and return a new nested list\n# using the specified keys to establish the correct items hierarchy.\nd.nest(\"values\", id_key=\"id\", parent_id_key=\"parent_id\", children_key=\"children\")\n```\n\n#### `remove`\n\n```python\n# Remove multiple keys from the dict.\n# It is possible to pass a single key or more keys (as list or *args).\nd.remove([\"firstname\", \"lastname\", \"email\"])\n```\n\n#### `rename`\n\n```python\n# Rename a dict item key from \"key\" to \"key_new\".\n# If key_new exists, a KeyError will be raised.\nd.rename(\"first_name\", \"firstname\")\n```\n\n#### `search`\n\n```python\n# Search and return a list of items (dict, key, value, ) matching the given query.\nr = d.search(\"hello\", in_keys=True, in_values=True, exact=False, case_sensitive=False)\n```\n\n#### `standardize`\n\n```python\n# Standardize all dict keys, e.g. \"Location Latitude\" -> \"location_latitude\".\nd.standardize()\n```\n\n#### `subset`\n\n```python\n# Return a dict subset for the given keys.\n# It is possible to pass a single key or more keys (as list or *args).\ns = d.subset([\"firstname\", \"lastname\", \"email\"])\n```\n\n#### `swap`\n\n```python\n# Swap items values at the given keys.\nd.swap(\"firstname\", \"lastname\")\n```\n\n#### `traverse`\n\n```python\n# Traverse a dict passing each item (dict, key, value) to the given callback function.\ndef f(d, key, value):\n    print(f\"dict: {d} - key: {key} - value: {value}\")\nd.traverse(f)\n```\n\n#### `unflatten`\n\n```python\n# Return a new unflattened dict using the given separator to split dict keys to nested keypaths.\nu = d.unflatten(separator=\"_\")\n```\n\n#### `unique`\n\n```python\n# Remove duplicated values from the dict.\nd.unique()\n```\n\n### I/O methods\n\nIt is possible to create a `benedict` instance directly from data-source (`filepath`, `url`, `s3` or `data-string`) by passing the data source and the data format (optional, default \"json\") in the constructor.\n\n```python\n# filepath\nd = benedict(\"/root/data.yml\", format=\"yaml\")\n\n# url\nd = benedict(\"https://localhost:8000/data.xml\", format=\"xml\")\n\n# s3\nd = benedict(\"s3://my-bucket/data.xml\", s3_options={\"aws_access_key_id\": \"...\", \"aws_secret_access_key\": \"...\"})\n\n# data-string\nd = benedict('{\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 7, \"y\": 8, \"z\": 9}')\n```\n\nThese methods simplify I/O operations with most common formats: `base64`, `csv`, `ini`, `json`, `pickle`, `plist`, `query-string`, `toml`, `xls`, `xml`, `yaml`.\n\nIn all `from_*` methods, the first argument can be: **url**, **filepath** or **data-string**.\n\nIn all `to_*` methods, if `filepath=\"...\"` kwarg is specified, the output will be also **saved** at the specified filepath.\n\n#### `from_base64`\n\n```python\n# Try to load/decode a base64 encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to choose the subformat used under the hood:\n# ('csv', 'json', 'query-string', 'toml', 'xml', 'yaml'), default: 'json'.\n# It's possible to choose the encoding, default 'utf-8'.\n# A ValueError is raised in case of failure.\nd = benedict.from_base64(s, subformat=\"json\", encoding=\"utf-8\", **kwargs)\n```\n\n#### `from_csv`\n\n```python\n# Try to load/decode a csv encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to specify the columns list, default: None (in this case the first row values will be used as keys).\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/csv.html\n# A ValueError is raised in case of failure.\nd = benedict.from_csv(s, columns=None, columns_row=True, **kwargs)\n```\n\n#### `from_ini`\n\n```python\n# Try to load/decode a ini encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/configparser.html\n# A ValueError is raised in case of failure.\nd = benedict.from_ini(s, **kwargs)\n```\n\n#### `from_json`\n\n```python\n# Try to load/decode a json encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/json.html\n# A ValueError is raised in case of failure.\nd = benedict.from_json(s, **kwargs)\n```\n\n#### `from_pickle`\n\n```python\n# Try to load/decode a pickle encoded in Base64 format and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/pickle.html\n# A ValueError is raised in case of failure.\nd = benedict.from_pickle(s, **kwargs)\n```\n\n#### `from_plist`\n\n```python\n# Try to load/decode a p-list encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/plistlib.html\n# A ValueError is raised in case of failure.\nd = benedict.from_plist(s, **kwargs)\n```\n\n#### `from_query_string`\n\n```python\n# Try to load/decode a query-string and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# A ValueError is raised in case of failure.\nd = benedict.from_query_string(s, **kwargs)\n```\n\n#### `from_toml`\n\n```python\n# Try to load/decode a toml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://pypi.org/project/toml/\n# A ValueError is raised in case of failure.\nd = benedict.from_toml(s, **kwargs)\n```\n\n#### `from_xls`\n\n```python\n# Try to load/decode a xls file (\".xls\", \".xlsx\", \".xlsm\") from url, filepath or data-string.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# - https://openpyxl.readthedocs.io/ (for .xlsx and .xlsm files)\n# - https://pypi.org/project/xlrd/ (for .xls files)\n# A ValueError is raised in case of failure.\nd = benedict.from_xls(s, sheet=0, columns=None, columns_row=True, **kwargs)\n```\n\n#### `from_xml`\n\n```python\n# Try to load/decode a xml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://github.com/martinblech/xmltodict\n# A ValueError is raised in case of failure.\nd = benedict.from_xml(s, **kwargs)\n```\n\n#### `from_yaml`\n\n```python\n# Try to load/decode a yaml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://pyyaml.org/wiki/PyYAMLDocumentation\n# A ValueError is raised in case of failure.\nd = benedict.from_yaml(s, **kwargs)\n```\n\n#### `to_base64`\n\n```python\n# Return the dict instance encoded in base64 format and optionally save it at the specified 'filepath'.\n# It's possible to choose the subformat used under the hood:\n# ('csv', json', 'query-string', 'toml', 'xml', 'yaml'), default: 'json'.\n# It's possible to choose the encoding, default 'utf-8'.\n# It's possible to pass decoder specific options using kwargs.\n# A ValueError is raised in case of failure.\ns = d.to_base64(subformat=\"json\", encoding=\"utf-8\", **kwargs)\n```\n\n#### `to_csv`\n\n```python\n# Return a list of dicts in the current dict encoded in csv format and optionally save it at the specified filepath.\n# It's possible to specify the key of the item (list of dicts) to encode, default: 'values'.\n# It's possible to specify the columns list, default: None (in this case the keys of the first item will be used).\n# A ValueError is raised in case of failure.\ns = d.to_csv(key=\"values\", columns=None, columns_row=True, **kwargs)\n```\n\n#### `to_ini`\n\n```python\n# Return the dict instance encoded in ini format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/configparser.html\n# A ValueError is raised in case of failure.\ns = d.to_ini(**kwargs)\n```\n\n#### `to_json`\n\n```python\n# Return the dict instance encoded in json format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/json.html\n# A ValueError is raised in case of failure.\ns = d.to_json(**kwargs)\n```\n\n#### `to_pickle`\n\n```python\n# Return the dict instance as pickle encoded in Base64 format and optionally save it at the specified filepath.\n# The pickle protocol used by default is 2.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/pickle.html\n# A ValueError is raised in case of failure.\ns = d.to_pickle(**kwargs)\n```\n\n#### `to_plist`\n\n```python\n# Return the dict instance encoded in p-list format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/plistlib.html\n# A ValueError is raised in case of failure.\ns = d.to_plist(**kwargs)\n```\n\n#### `to_query_string`\n\n```python\n# Return the dict instance as query-string and optionally save it at the specified filepath.\n# A ValueError is raised in case of failure.\ns = d.to_query_string(**kwargs)\n```\n\n#### `to_toml`\n\n```python\n# Return the dict instance encoded in toml format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://pypi.org/project/toml/\n# A ValueError is raised in case of failure.\ns = d.to_toml(**kwargs)\n```\n\n#### `to_xml`\n\n```python\n# Return the dict instance encoded in xml format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://github.com/martinblech/xmltodict\n# A ValueError is raised in case of failure.\ns = d.to_xml(**kwargs)\n```\n\n#### `to_yaml`\n\n```python\n# Return the dict instance encoded in yaml format.\n# If filepath option is passed the output will be saved ath\n# It's possible to pass encoder specific options using kwargs:\n# https://pyyaml.org/wiki/PyYAMLDocumentation\n# A ValueError is raised in case of failure.\ns = d.to_yaml(**kwargs)\n```\n\n### Parse methods\n\nThese methods are wrappers of the `get` method, they parse data trying to return it in the expected type.\n\n#### `get_bool`\n\n```python\n# Get value by key or keypath trying to return it as bool.\n# Values like `1`, `true`, `yes`, `on`, `ok` will be returned as `True`.\nd.get_bool(key, default=False)\n```\n\n#### `get_bool_list`\n\n```python\n# Get value by key or keypath trying to return it as list of bool values.\n# If separator is specified and value is a string it will be splitted.\nd.get_bool_list(key, default=[], separator=\",\")\n```\n\n#### `get_date`\n\n```python\n# Get value by key or keypath trying to return it as date.\n# If format is not specified it will be autodetected.\n# If choices and value is in choices return value otherwise default.\nd.get_date(key, default=None, format=None, choices=[])\n```\n\n#### `get_date_list`\n\n```python\n# Get value by key or keypath trying to return it as list of date values.\n# If separator is specified and value is a string it will be splitted.\nd.get_date_list(key, default=[], format=None, separator=\",\")\n```\n\n#### `get_datetime`\n\n```python\n# Get value by key or keypath trying to return it as datetime.\n# If format is not specified it will be autodetected.\n# If choices and value is in choices return value otherwise default.\nd.get_datetime(key, default=None, format=None, choices=[])\n```\n\n#### `get_datetime_list`\n\n```python\n# Get value by key or keypath trying to return it as list of datetime values.\n# If separator is specified and value is a string it will be splitted.\nd.get_datetime_list(key, default=[], format=None, separator=\",\")\n```\n\n#### `get_decimal`\n\n```python\n# Get value by key or keypath trying to return it as Decimal.\n# If choices and value is in choices return value otherwise default.\nd.get_decimal(key, default=Decimal(\"0.0\"), choices=[])\n```\n\n#### `get_decimal_list`\n\n```python\n# Get value by key or keypath trying to return it as list of Decimal values.\n# If separator is specified and value is a string it will be splitted.\nd.get_decimal_list(key, default=[], separator=\",\")\n```\n\n#### `get_dict`\n\n```python\n# Get value by key or keypath trying to return it as dict.\n# If value is a json string it will be automatically decoded.\nd.get_dict(key, default={})\n```\n\n#### `get_email`\n\n```python\n# Get email by key or keypath and return it.\n# If value is blacklisted it will be automatically ignored.\n# If check_blacklist is False, it will be not ignored even if blacklisted.\nd.get_email(key, default=\"\", choices=None, check_blacklist=True)\n```\n\n#### `get_float`\n\n```python\n# Get value by key or keypath trying to return it as float.\n# If choices and value is in choices return value otherwise default.\nd.get_float(key, default=0.0, choices=[])\n```\n\n#### `get_float_list`\n\n```python\n# Get value by key or keypath trying to return it as list of float values.\n# If separator is specified and value is a string it will be splitted.\nd.get_float_list(key, default=[], separator=\",\")\n```\n\n#### `get_int`\n\n```python\n# Get value by key or keypath trying to return it as int.\n# If choices and value is in choices return value otherwise default.\nd.get_int(key, default=0, choices=[])\n```\n\n#### `get_int_list`\n\n```python\n# Get value by key or keypath trying to return it as list of int values.\n# If separator is specified and value is a string it will be splitted.\nd.get_int_list(key, default=[], separator=\",\")\n```\n\n#### `get_list`\n\n```python\n# Get value by key or keypath trying to return it as list.\n# If separator is specified and value is a string it will be splitted.\nd.get_list(key, default=[], separator=\",\")\n```\n\n#### `get_list_item`\n\n```python\n# Get list by key or keypath and return value at the specified index.\n# If separator is specified and list value is a string it will be splitted.\nd.get_list_item(key, index=0, default=None, separator=\",\")\n```\n\n#### `get_phonenumber`\n\n```python\n# Get phone number by key or keypath and return a dict with different formats (e164, international, national).\n# If country code is specified (alpha 2 code), it will be used to parse phone number correctly.\nd.get_phonenumber(key, country_code=None, default=None)\n```\n\n#### `get_slug`\n\n```python\n# Get value by key or keypath trying to return it as slug.\n# If choices and value is in choices return value otherwise default.\nd.get_slug(key, default=\"\", choices=[])\n```\n\n#### `get_slug_list`\n\n```python\n# Get value by key or keypath trying to return it as list of slug values.\n# If separator is specified and value is a string it will be splitted.\nd.get_slug_list(key, default=[], separator=\",\")\n```\n\n#### `get_str`\n\n```python\n# Get value by key or keypath trying to return it as string.\n# Encoding issues will be automatically fixed.\n# If choices and value is in choices return value otherwise default.\nd.get_str(key, default=\"\", choices=[])\n```\n\n#### `get_str_list`\n\n```python\n# Get value by key or keypath trying to return it as list of str values.\n# If separator is specified and value is a string it will be splitted.\nd.get_str_list(key, default=[], separator=\",\")\n```\n\n#### `get_uuid`\n\n```python\n# Get value by key or keypath trying to return it as valid uuid.\n# If choices and value is in choices return value otherwise default.\nd.get_uuid(key, default=\"\", choices=[])\n```\n\n#### `get_uuid_list`\n\n```python\n# Get value by key or keypath trying to return it as list of valid uuid values.\n# If separator is specified and value is a string it will be splitted.\nd.get_uuid_list(key, default=[], separator=\",\")\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/python-benedict.git && cd python-benedict\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests using tox\ntox\n\n# or run tests using unittest\npython -m unittest\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/python-benedict)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 3
        },
        "discussions": {
          "totalCount": 3
        },
        "nameWithOwner": "fabiocaccamo/python-benedict",
        "description": ":blue_book: dict subclass with keylist/keypath support, built-in I/O operations (base64, csv, ini, json, pickle, plist, query-string, toml, xls, xml, yaml), s3 support and many utilities.",
        "openGraphImageUrl": "https://repository-images.githubusercontent.com/187202744/024f6180-049f-11eb-876a-be68f8b900d1",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 42,
        "issues": {
          "totalCount": 9
        },
        "stargazerCount": 1062,
        "pullRequests": {
          "totalCount": 2
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "Q#"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/FCFileManager",
      "repo": {
        "name": "FCFileManager",
        "object": {
          "text": "FCFileManager ![Pod version](http://img.shields.io/cocoapods/v/FCFileManager.svg) ![Pod platforms](http://img.shields.io/cocoapods/p/FCFileManager.svg) ![Pod license](http://img.shields.io/cocoapods/l/FCFileManager.svg)\n=============\n\n**iOS File Manager on top of NSFileManager for simplifying files management.** It provides many static methods for executing most common operations with few lines of code. It works by default in the Documents directory to allow use of relative paths, but it's possible to work easily on any other directory.\n\n## Requirements\n- iOS >= 5.0\n- ARC enabled\n\n## Installation\n\n#### CocoaPods:\n`pod 'FCFileManager'`\n\n#### Manual install:\nCopy `FCFileManager.h` and `FCFileManager.m` to your project.\n\n## Features\n- **Build paths** relative to absolute directories *(FCFileManager works by default in the Documents directory, so you must build absolute paths only if you need to work outside of the Documents directory)*\n- **Copy** files/directories\n- **Create** files/directories\n- **Check if** files/directory **exists**\n- **Get** files/directories **attributes** *(creation date, size, ...)*\n- **List** files/directories\n- **Move** files/directories\n- **Read/Write** files content in different formats *(arrays, custom models, data, dictionaries, images, json, strings, ... )*\n- **Read/Write xattr** *(Extended File Attributes)*\n- **Read** images metadata, **EXIF** data, **TIFF** data\n- **Remove** files/directories\n- **Rename** files/directories\n- Directories are created on the fly\n- **Error handling** as using NSFileManager\n\nSee [FCFileManager.h](https://github.com/fabiocaccamo/FCFileManager/blob/master/FCFileManager/FCFileManager.h) for all of the methods.\n\n## Usage examples\n\n**Build path:**\n```objc\n//my file path, this will be automatically used as it's relative to the Documents directory\nNSString *testPath = @\"test.txt\";\n//my file path relative to the temporary directory path\nNSString *testPathTemp = [FCFileManager pathForTemporaryDirectoryWithPath:testPath];\n\n/*\nAll shortcuts suppported:\n\npathForApplicationSupportDirectory;\npathForCachesDirectory;\npathForDocumentsDirectory;\npathForLibraryDirectory;\npathForMainBundleDirectory;\npathForPlistNamed:(NSString *)name; //look for {{ name }}.plist in the main bundle directory\npathForTemporaryDirectory;\n*/\n```\n\n**Copy file:**\n```objc\n//copy file from Documents directory (public) to ApplicationSupport directory (private)\nNSString *testPath = [FCFileManager pathForApplicationSupportDirectoryWithPath:@\"test-copy.txt\"];\n[FCFileManager copyItemAtPath:@\"test.txt\" toPath:testPath];\n```\n\n**Create file:**\n```objc\n//create file and write content to it (if it doesn't exist)\n[FCFileManager createFileAtPath:@\"test.txt\" withContent:@\"File management has never been so easy!!!\"];\n```\n\n**Create directories:**\n```objc\n//create directories tree for the given path (in this case in the Documents directory)\n[FCFileManager createDirectoriesForPath:@\"/a/b/c/d/\"];\n```\n\n**Check if file exists:**\n```objc\n//check if file exist and returns YES or NO\nBOOL testFileExists = [FCFileManager existsItemAtPath:@\"test.txt\"];\n```\n\n**Move file:**\n```objc\n//move file from a path to another and returns YES or NO\n[FCFileManager moveItemAtPath:@\"test.txt\" toPath:@\"tests/test.txt\"];\n```\n\n**Read file:**\n```objc\n//read file from path and returns its content (NSString in this case)\nNSString *test = [FCFileManager readFileAtPath:@\"test.txt\"];\n```\n\n**Read/Write xattr (Extended File Attributes):**\n```objc\n//returns the string-value stored for the specified key, if the key doesn't exist returns nil\nNSString *value = [FCFileManager xattrOfItemAtPath:@\"test.txt\" getValueForKey:\"uploaded\"];\n\n//set the specified string-value and returns a BOOL result of the operation\nBOOL success = [FCFileManager xattrOfItemAtPath:@\"test.txt\" setValue:@\"1\" forKey:@\"uploaded\"];\n```\n\n**Read image EXIF data:**\n```objc\n//read image file from path and returns its EXIF data\nNSDictionary *exifData = [FCFileManager exifDataOfImageAtPath:@\"test.jpg\"];\n```\n\n**Remove file:**\n```objc\n//remove file at the specified path\n[FCFileManager removeItemAtPath:@\"test.txt\"];\n```\n\n**Rename file:**\n```objc\n//rename file at the specified path with the new name\n[FCFileManager renameItemAtPath:@\"test.txt\" withName:@\"test-renamed.txt\"];\n```\n\n**Write file:**\n```objc\nNSArray *testContent = [NSArray arrayWithObjects:@\"t\", @\"e\", @\"s\", @\"t\", nil];\n\n//write file at the specified path with content\n[FCFileManager writeFileAtPath:@\"test.txt\" content:testContent];\n```\n\n**Get file/directory size:**\n```objc\n//get the file size in bytes\nNSNumber *fileSize = [FCFileManager sizeOfFileAtPath:@\"test.txt\"];\n\n//get the directory size in bytes (including all subdirectories and files inside it)\nNSNumber *directorySize = [FCFileManager sizeOfDirectoryAtPath:@\"/a/\"];\n```\n\n**Get file/directory size formatted:**\n```objc\n//returns a human-readable file size formatted with the necessary suffix: bytes, KB, MB, GB, TB\nNSString *fileSizeFormatted = [FCFileManager sizeFormattedOfFileAtPath:@\"test.txt\"];\n```\n\n## Support development\n[![Donate](https://www.paypalobjects.com/webstatic/en_US/btn/btn_donate_pp_142x27.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=fabio%2ecaccamo%40gmail%2ecom&lc=IT&item_name=Fabio%20Caccamo%20%2d%20Open%20Source%20Projects&item_number=FCFileManager&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted)\n\n## License\nReleased under [MIT License](LICENSE).\n"
        },
        "mentionableUsers": {
          "totalCount": 7
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/FCFileManager",
        "description": ":iphone: :open_file_folder: iOS file manager on top of NSFileManager for simplifying files management.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/c348b9f81b70102c0c074a2b2da87aa94eb09e8098a72e6ddda44821fb13cbc6/fabiocaccamo/FCFileManager",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 140,
        "issues": {
          "totalCount": 4
        },
        "stargazerCount": 894,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Ruby"
            },
            {
              "name": "Objective-C"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-colorfield",
      "repo": {
        "name": "django-colorfield",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-colorfield.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-colorfield?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-colorfield.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-colorfield/)\n[![](https://pepy.tech/badge/django-colorfield/month)](https://pepy.tech/project/django-colorfield)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-colorfield?logo=github)](https://github.com/fabiocaccamo/django-colorfield/stargazers)\n[![](https://img.shields.io/pypi/l/django-colorfield.svg?color=blue)](https://github.com/fabiocaccamo/django-colorfield/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-colorfield/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-colorfield/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-colorfield/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-colorfield)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-colorfield?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-colorfield)\n[![](https://img.shields.io/codacy/grade/194566618f424a819ce43450ea0af081?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-colorfield)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-colorfield?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-colorfield/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-colorfield\nsimple color field for your models with a nice color-picker in the admin-interface.\n\n![django-colorfield-hex](https://user-images.githubusercontent.com/7900305/104512324-51ed0f80-55ee-11eb-9144-de03d922c2ce.png)\n![django-colorfield-hexa](https://user-images.githubusercontent.com/7900305/104512063-ec991e80-55ed-11eb-95b6-9174ac3f4f38.png)\n\n---\n\n## Installation\n-   Run `pip install django-colorfield`\n-   Add `colorfield` to `settings.INSTALLED_APPS`\n-   Run `python manage.py collectstatic`\n-   Restart your application server\n\n---\n\n## Usage\n\n### Settings\nThis package doesn't need any setting.\n\n### Models\nJust add color field(s) to your models like this:\n\n```python\nfrom colorfield.fields import ColorField\nfrom django.db import models\n\nclass MyModel(model.Model):\n    color = ColorField(default='#FF0000')\n```\n\n### Field Options\nThese are the supported custom options: [`format`](#format), [`image_field`](#image_field), [`samples`](#samples)\n\n#### format\n\nThe following formats are supported: `hex` *(default)*, `hexa`.\n\n```python\nfrom colorfield.fields import ColorField\nfrom django.db import models\n\nclass MyModel(model.Model):\n    color = ColorField(format=\"hexa\")\n```\n\n#### image_field\n\nIt is possible to auto-populate the field value getting the color from an image using the `image_field` option.\n\nThe color will be calculated from the **top-left pixel** color of the image each time the model instance is saved.\n\n```python\nfrom colorfield.fields import ColorField\nfrom django.db import models\n\nclass MyModel(model.Model):\n    image = models.ImageField(upload_to=\"images\")\n    color = ColorField(image_field=\"image\")\n```\n\n#### samples\n\nIt is possible to provide a palette of colors to choose from to the widget using the `samples` option.\n\nThis option **is not restrictive** (on the contrary of `choices` option), it is also possible to choose another color from the spectrum.\n\n![django-colorfield-samples](https://user-images.githubusercontent.com/7900305/104512178-194d3600-55ee-11eb-8cba-91cca156da06.png)\n\n```python\nfrom colorfield.fields import ColorField\nfrom django.db import models\n\nclass MyModel(model.Model):\n\n    COLOR_PALETTE = [\n        (\"#FFFFFF\", \"white\", ),\n        (\"#000000\", \"black\", ),\n    ]\n\n    # not restrictive, allows the selection of another color from the spectrum.\n    color = ColorField(samples=COLOR_PALETTE)\n\n    # restrictive, it is mandatory to choose a color from the palette\n    color = ColorField(choices=COLOR_PALETTE)\n```\n\n### Admin\nThe admin will kindly provide a simple [color picker](http://jscolor.com/) for all color fields. :)\n\n---\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-colorfield.git && cd django-colorfield\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n---\n\n## Credits\nOriginally developed by [Jared Forsyth](https://github.com/jaredly)\n\n---\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-colorfield)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 25
        },
        "discussions": {
          "totalCount": 2
        },
        "nameWithOwner": "fabiocaccamo/django-colorfield",
        "description": ":art: color field for django models with a nice color-picker in the admin.",
        "openGraphImageUrl": "https://repository-images.githubusercontent.com/645063/66d4ed80-523b-11ea-8afb-c4d13191876b",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 96,
        "issues": {
          "totalCount": 4
        },
        "stargazerCount": 484,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "HTML"
            },
            {
              "name": "JavaScript"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-treenode",
      "repo": {
        "name": "django-treenode",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-treenode.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-treenode?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-treenode.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-treenode/)\n[![](https://pepy.tech/badge/django-treenode/month)](https://pepy.tech/project/django-treenode)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-treenode?logo=github)](https://github.com/fabiocaccamo/django-treenode/stargazers)\n[![](https://img.shields.io/pypi/l/django-treenode.svg?color=blue)](https://github.com/fabiocaccamo/django-treenode/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-treenode/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-treenode/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-treenode/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-treenode)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-treenode?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-treenode)\n[![](https://img.shields.io/codacy/grade/0c79c196e5c9411babbaf5e8e5f7469c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-treenode)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-treenode\nProbably the best abstract model / admin for your **tree** based stuff.\n\n## Features\n-   **Fast** - get `ancestors`, `children`, `descendants`, `parent`, `root`, `siblings`, `tree` with **no queries**\n-   **Synced** - in-memory model instances are automatically updated\n-   **Compatibility** - you can easily add `treenode` to existing projects\n-   **No dependencies**\n-   **Easy configuration** - just extend the abstract model / model-admin\n-   **Admin integration** - great tree visualization: **accordion**, **breadcrumbs** or **indentation**\n\n| indentation (default) | breadcrumbs | accordion |\n| --- | --- | --- |\n| ![treenode-admin-display-mode-indentation][treenode-admin-display-mode-indentation] | ![treenode-admin-display-mode-breadcrumbs][treenode-admin-display-mode-breadcrumbs] | ![treenode-admin-display-mode-accordion][treenode-admin-display-mode-accordion] |\n\n## Installation\n-   Run `pip install django-treenode`\n-   Add `treenode` to `settings.INSTALLED_APPS`\n-   Make your model inherit from `treenode.models.TreeNodeModel` *(described below)*\n-   Make your model-admin inherit from `treenode.admin.TreeNodeModelAdmin` *(described below)*\n-   Run `python manage.py makemigrations` and `python manage.py migrate`\n\n## Configuration\n### `models.py`\nMake your model class inherit from `treenode.models.TreeNodeModel`:\n\n```python\nfrom django.db import models\n\nfrom treenode.models import TreeNodeModel\n\n\nclass Category(TreeNodeModel):\n\n    # the field used to display the model instance\n    # default value 'pk'\n    treenode_display_field = \"name\"\n\n    name = models.CharField(max_length=50)\n\n    class Meta(TreeNodeModel.Meta):\n        verbose_name = \"Category\"\n        verbose_name_plural = \"Categories\"\n```\n\nThe `TreeNodeModel` abstract class adds many fields (prefixed with `tn_` to prevent direct access) and public methods to your models.\n\n:warning: **If you are extending a model that already has some fields, please ensure that your model existing fields names don't clash with `TreeNodeModel` public [methods/properties](#methodsproperties) names.**\n\n---\n\n### `admin.py`\nMake your model-admin class inherit from `treenode.admin.TreeNodeModelAdmin`.\n\n```python\nfrom django.contrib import admin\n\nfrom treenode.admin import TreeNodeModelAdmin\nfrom treenode.forms import TreeNodeForm\n\nfrom .models import Category\n\n\nclass CategoryAdmin(TreeNodeModelAdmin):\n\n    # set the changelist display mode: 'accordion', 'breadcrumbs' or 'indentation' (default)\n    # when changelist results are filtered by a querystring,\n    # 'breadcrumbs' mode will be used (to preserve data display integrity)\n    treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_ACCORDION\n    # treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_BREADCRUMBS\n    # treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_INDENTATION\n\n    # use TreeNodeForm to automatically exclude invalid parent choices\n    form = TreeNodeForm\n\nadmin.site.register(Category, CategoryAdmin)\n```\n\n---\n\n### `settings.py`\nYou can use a custom cache backend by adding a `treenode` entry to `settings.CACHES`, otherwise the default cache backend will be used.\n\n```python\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"...\",\n    },\n    \"treenode\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n    },\n}\n```\n\n## Usage\n\n### Methods/Properties\n\n-   [`delete`](#delete)\n-   [`delete_tree`](#delete_tree)\n-   [`get_ancestors`](#get_ancestors)\n-   [`get_ancestors_count`](#get_ancestors_count)\n-   [`get_ancestors_pks`](#get_ancestors_pks)\n-   [`get_ancestors_queryset`](#get_ancestors_queryset)\n-   [`get_breadcrumbs`](#get_breadcrumbs)\n-   [`get_children`](#get_children)\n-   [`get_children_count`](#get_children_count)\n-   [`get_children_pks`](#get_children_pks)\n-   [`get_children_queryset`](#get_children_queryset)\n-   [`get_depth`](#get_depth)\n-   [`get_descendants`](#get_descendants)\n-   [`get_descendants_count`](#get_descendants_count)\n-   [`get_descendants_pks`](#get_descendants_pks)\n-   [`get_descendants_queryset`](#get_descendants_queryset)\n-   [`get_descendants_tree`](#get_descendants_tree)\n-   [`get_descendants_tree_display`](#get_descendants_tree_display)\n-   [`get_first_child`](#get_first_child)\n-   [`get_index`](#get_index)\n-   [`get_last_child`](#get_last_child)\n-   [`get_level`](#get_level)\n-   [`get_order`](#get_order)\n-   [`get_parent`](#get_parent)\n-   [`get_parent_pk`](#get_parent_pk)\n-   [`set_parent`](#set_parent)\n-   [`get_priority`](#get_priority)\n-   [`set_priority`](#set_priority)\n-   [`get_root`](#get_root)\n-   [`get_root_pk`](#get_root_pk)\n-   [`get_roots`](#get_roots)\n-   [`get_roots_queryset`](#get_roots_queryset)\n-   [`get_siblings`](#get_siblings)\n-   [`get_siblings_count`](#get_siblings_count)\n-   [`get_siblings_pks`](#get_siblings_pks)\n-   [`get_siblings_queryset`](#get_siblings_queryset)\n-   [`get_tree`](#get_tree)\n-   [`get_tree_display`](#get_tree_display)\n-   [`is_ancestor_of`](#is_ancestor_of)\n-   [`is_child_of`](#is_child_of)\n-   [`is_descendant_of`](#is_descendant_of)\n-   [`is_first_child`](#is_first_child)\n-   [`is_last_child`](#is_last_child)\n-   [`is_leaf`](#is_leaf)\n-   [`is_parent_of`](#is_parent_of)\n-   [`is_root`](#is_root)\n-   [`is_root_of`](#is_root_of)\n-   [`is_sibling_of`](#is_sibling_of)\n-   [`update_tree`](#update_tree)\n\n\n#### `delete`\n**Delete a node** if `cascade=True` (default behaviour), children and descendants will be deleted too,\notherwise children's parent will be set to `None` (then children become roots):\n```python\nobj.delete(cascade=True)\n```\n\n#### `delete_tree`\n**Delete the whole tree** for the current node class:\n```python\ncls.delete_tree()\n```\n\n#### `get_ancestors`\nGet a **list with all ancestors** (ordered from root to parent):\n```python\nobj.get_ancestors()\n# or\nobj.ancestors\n```\n\n#### `get_ancestors_count`\nGet the **ancestors count**:\n```python\nobj.get_ancestors_count()\n# or\nobj.ancestors_count\n```\n\n#### `get_ancestors_pks`\nGet the **ancestors pks** list:\n```python\nobj.get_ancestors_pks()\n# or\nobj.ancestors_pks\n```\n\n#### `get_ancestors_queryset`\nGet the **ancestors queryset** (ordered from parent to root):\n```python\nobj.get_ancestors_queryset()\n```\n\n#### `get_breadcrumbs`\nGet the **breadcrumbs** to current node (included):\n```python\nobj.get_breadcrumbs(attr=None)\n# or\nobj.breadcrumbs\n```\n\n#### `get_children`\nGet a **list containing all children**:\n```python\nobj.get_children()\n# or\nobj.children\n```\n\n#### `get_children_count`\nGet the **children count**:\n```python\nobj.get_children_count()\n# or\nobj.children_count\n```\n\n#### `get_children_pks`\nGet the **children pks** list:\n```python\nobj.get_children_pks()\n# or\nobj.children_pks\n```\n\n#### `get_children_queryset`\nGet the **children queryset**:\n```python\nobj.get_children_queryset()\n```\n\n#### `get_depth`\nGet the **node depth** (how many levels of descendants):\n```python\nobj.get_depth()\n# or\nobj.depth\n```\n\n#### `get_descendants`\nGet a **list containing all descendants**:\n```python\nobj.get_descendants()\n# or\nobj.descendants\n```\n\n#### `get_descendants_count`\nGet the **descendants count**:\n```python\nobj.get_descendants_count()\n# or\nobj.descendants_count\n```\n\n#### `get_descendants_pks`\nGet the **descendants pks** list:\n```python\nobj.get_descendants_pks()\n# or\nobj.descendants_pks\n```\n\n#### `get_descendants_queryset`\nGet the **descendants queryset**:\n```python\nobj.get_descendants_queryset()\n```\n\n#### `get_descendants_tree`\nGet a **n-dimensional** `dict` representing the **model tree**:\n```python\nobj.get_descendants_tree()\n# or\nobj.descendants_tree\n```\n\n#### `get_descendants_tree_display`\nGet a **multiline** `string` representing the **model tree**:\n```python\nobj.get_descendants_tree_display()\n# or\nobj.descendants_tree_display\n```\n\n#### `get_first_child`\nGet the **first child node**:\n```python\nobj.get_first_child()\n# or\nobj.first_child\n```\n\n#### `get_index`\nGet the **node index** (index in node.parent.children list):\n```python\nobj.get_index()\n# or\nobj.index\n```\n\n#### `get_last_child`\nGet the **last child node**:\n```python\nobj.get_last_child()\n# or\nobj.last_child\n```\n\n#### `get_level`\nGet the **node level** (starting from 1):\n```python\nobj.get_level()\n# or\nobj.level\n```\n\n#### `get_order`\nGet the **order value** used for ordering:\n```python\nobj.get_order()\n# or\nobj.order\n```\n\n#### `get_parent`\nGet the **parent node**:\n```python\nobj.get_parent()\n# or\nobj.parent\n```\n\n#### `get_parent_pk`\nGet the **parent node pk**:\n```python\nobj.get_parent_pk()\n# or\nobj.parent_pk\n```\n\n#### `set_parent`\nSet the **parent node**:\n```python\nobj.set_parent(parent_obj)\n```\n\n#### `get_priority`\nGet the **node priority**:\n```python\nobj.get_priority()\n# or\nobj.priority\n```\n\n#### `set_priority`\nSet the **node priority**:\n```python\nobj.set_priority(100)\n```\n\n#### `get_root`\nGet the **root node** for the current node:\n```python\nobj.get_root()\n# or\nobj.root\n```\n\n#### `get_root_pk`\nGet the **root node pk** for the current node:\n```python\nobj.get_root_pk()\n# or\nobj.root_pk\n```\n\n#### `get_roots`\nGet a **list with all root nodes**:\n```python\ncls.get_roots()\n# or\ncls.roots\n```\n\n#### `get_roots_queryset`\nGet **root nodes queryset**:\n```python\ncls.get_roots_queryset()\n```\n\n#### `get_siblings`\nGet a **list with all the siblings**:\n```python\nobj.get_siblings()\n# or\nobj.siblings\n```\n\n#### `get_siblings_count`\nGet the **siblings count**:\n```python\nobj.get_siblings_count()\n# or\nobj.siblings_count\n```\n\n#### `get_siblings_pks`\nGet the **siblings pks** list:\n```python\nobj.get_siblings_pks()\n# or\nobj.siblings_pks\n```\n\n#### `get_siblings_queryset`\nGet the **siblings queryset**:\n```python\nobj.get_siblings_queryset()\n```\n\n#### `get_tree`\nGet a **n-dimensional** `dict` representing the **model tree**:\n```python\ncls.get_tree()\n# or\ncls.tree\n```\n\n#### `get_tree_display`\nGet a **multiline** `string` representing the **model tree**:\n```python\ncls.get_tree_display()\n# or\ncls.tree_display\n```\n\n#### `is_ancestor_of`\nReturn `True` if the current node **is ancestor** of target_obj:\n```python\nobj.is_ancestor_of(target_obj)\n```\n\n#### `is_child_of`\nReturn `True` if the current node **is child** of target_obj:\n```python\nobj.is_child_of(target_obj)\n```\n\n#### `is_descendant_of`\nReturn `True` if the current node **is descendant** of target_obj:\n```python\nobj.is_descendant_of(target_obj)\n```\n\n#### `is_first_child`\nReturn `True` if the current node is the **first child**:\n```python\nobj.is_first_child()\n```\n\n#### `is_last_child`\nReturn `True` if the current node is the **last child**:\n```python\nobj.is_last_child()\n```\n\n#### `is_leaf`\nReturn `True` if the current node is **leaf** (it has not children):\n```python\nobj.is_leaf()\n```\n\n#### `is_parent_of`\nReturn `True` if the current node **is parent** of target_obj:\n```python\nobj.is_parent_of(target_obj)\n```\n\n#### `is_root`\nReturn `True` if the current node **is root**:\n```python\nobj.is_root()\n```\n\n#### `is_root_of`\nReturn `True` if the current node **is root** of target_obj:\n```python\nobj.is_root_of(target_obj)\n```\n\n#### `is_sibling_of`\nReturn `True` if the current node **is sibling** of target_obj:\n```python\nobj.is_sibling_of(target_obj)\n```\n\n#### `update_tree`\n**Update tree** manually, useful after **bulk updates**:\n```python\ncls.update_tree()\n```\n\n### Bulk Operations\n\nTo perform bulk operations it is recommended to turn off signals, then triggering the tree update at the end:\n\n```python\nfrom treenode.signals import no_signals\n\nwith no_signals():\n    # execute custom bulk operations\n    pass\n\n# trigger tree update only once\nYourModel.update_tree()\n```\n\n## FAQ\n\n### Custom tree serialization\n> How can I serialize a tree using a custom data structure?\n\nThis has been discussed [here](https://github.com/fabiocaccamo/django-treenode/discussions/89#discussioncomment-5521654).\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-treenode.git && cd django-treenode\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-treenode)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n\n[treenode-admin-display-mode-accordion]: https://user-images.githubusercontent.com/1035294/54942407-5040ec00-4f2f-11e9-873b-d0b3b521f534.png\n[treenode-admin-display-mode-breadcrumbs]: https://user-images.githubusercontent.com/1035294/54942410-50d98280-4f2f-11e9-8a8b-a1ac6208398a.png\n[treenode-admin-display-mode-indentation]: https://user-images.githubusercontent.com/1035294/54942411-50d98280-4f2f-11e9-9daf-d8339dd7a159.png\n"
        },
        "mentionableUsers": {
          "totalCount": 3
        },
        "discussions": {
          "totalCount": 1
        },
        "nameWithOwner": "fabiocaccamo/django-treenode",
        "description": ":deciduous_tree: probably the best abstract model/admin for your tree based stuff.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/11cae91f112f9e41fdc5e41150465dc2c1675f41d66c2fc70b839241d8ba4154/fabiocaccamo/django-treenode",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 24,
        "issues": {
          "totalCount": 9
        },
        "stargazerCount": 432,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "CSS"
            },
            {
              "name": "JavaScript"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-maintenance-mode",
      "repo": {
        "name": "django-maintenance-mode",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-maintenance-mode.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-maintenance-mode?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-maintenance-mode.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-maintenance-mode/)\n[![](https://pepy.tech/badge/django-maintenance-mode/month)](https://pepy.tech/project/django-maintenance-mode)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-maintenance-mode?logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode/stargazers)\n[![](https://img.shields.io/pypi/l/django-maintenance-mode.svg?color=blue)](https://github.com/fabiocaccamo/django-maintenance-mode/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-maintenance-mode/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-maintenance-mode/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-maintenance-mode/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-maintenance-mode?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codacy/grade/918668ac85e74206a4d8d95923548d79?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-maintenance-mode?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-maintenance-mode/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-maintenance-mode\ndjango-maintenance-mode shows a 503 error page when **maintenance-mode** is **on**.\n\nIt works at application level, so your django instance should be up.\n\nIt doesn't use database and doesn't prevent database access.\n\n## Installation\n\n1. Run `pip install django-maintenance-mode` or [download django-maintenance-mode](http://pypi.python.org/pypi/django-maintenance-mode) and add the **maintenance_mode** package to your project\n2. Add `maintenance_mode` to `settings.INSTALLED_APPS` before custom applications\n3. Add `maintenance_mode.middleware.MaintenanceModeMiddleware` to `settings.MIDDLEWARE` as last middleware\n4. Add your custom `templates/503.html` file\n5. Restart your application server\n\n## Configuration (optional)\n\n### Settings\nAll these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.\n\n```python\n# if True the maintenance-mode will be activated\nMAINTENANCE_MODE = None\n```\n\n```python\n# by default, to get/set the state value a local file backend is used\n# if you want to use the db or cache, you can create a custom backend\n# custom backends must extend 'maintenance_mode.backends.AbstractStateBackend' class\n# and implement get_value(self) and set_value(self, val) methods\nMAINTENANCE_MODE_STATE_BACKEND = \"maintenance_mode.backends.LocalFileBackend\"\n\n# alternatively it is possible to use the default storage backend\nMAINTENANCE_MODE_STATE_BACKEND = \"maintenance_mode.backends.DefaultStorageBackend\"\n\n# alternatively it is possible to use the static storage backend\n# make sure that STATIC_ROOT and STATIC_URL are also set\nMAINTENANCE_MODE_STATE_BACKEND = \"maintenance_mode.backends.StaticStorageBackend\"\n```\n\n```python\n# by default, a file named \"maintenance_mode_state.txt\" will be created in the settings.py directory\n# you can customize the state file path in case the default one is not writable\nMAINTENANCE_MODE_STATE_FILE_PATH = \"maintenance_mode_state.txt\"\n```\n\n```python\n# if True admin site will not be affected by the maintenance-mode page\nMAINTENANCE_MODE_IGNORE_ADMIN_SITE = False\n```\n\n```python\n# if True anonymous users will not see the maintenance-mode page\nMAINTENANCE_MODE_IGNORE_ANONYMOUS_USER = False\n```\n\n```python\n# if True authenticated users will not see the maintenance-mode page\nMAINTENANCE_MODE_IGNORE_AUTHENTICATED_USER = False\n```\n\n```python\n# if True the staff will not see the maintenance-mode page\nMAINTENANCE_MODE_IGNORE_STAFF = False\n```\n\n```python\n# if True the superuser will not see the maintenance-mode page\nMAINTENANCE_MODE_IGNORE_SUPERUSER = False\n```\n\n```python\n# list of ip-addresses that will not be affected by the maintenance-mode\n# ip-addresses will be used to compile regular expressions objects\nMAINTENANCE_MODE_IGNORE_IP_ADDRESSES = ()\n```\n\n```python\n# the path of the function that will return the client IP address given the request object -> 'myapp.mymodule.myfunction'\n# the default function ('maintenance_mode.utils.get_client_ip_address') returns request.META['REMOTE_ADDR']\n# in some cases the default function returns None, to avoid this scenario just use 'django-ipware'\nMAINTENANCE_MODE_GET_CLIENT_IP_ADDRESS = None\n```\nRetrieve user's real IP address using [`django-ipware`](https://github.com/un33k/django-ipware):\n```python\nMAINTENANCE_MODE_GET_CLIENT_IP_ADDRESS = \"ipware.ip.get_ip\"\n```\n\n```python\n# list of urls that will not be affected by the maintenance-mode\n# urls will be used to compile regular expressions objects\nMAINTENANCE_MODE_IGNORE_URLS = ()\n```\n\n```python\n# if True the maintenance mode will not return 503 response while running tests\n# useful for running tests while maintenance mode is on, before opening the site to public use\nMAINTENANCE_MODE_IGNORE_TESTS = False\n```\n\n```python\n# the absolute url where users will be redirected to during maintenance-mode\nMAINTENANCE_MODE_REDIRECT_URL = None\n```\n\n```python\n# the template that will be shown by the maintenance-mode page\nMAINTENANCE_MODE_TEMPLATE = \"503.html\"\n```\n\n```python\n# the path of the function that will return the template context -> 'myapp.mymodule.myfunction'\nMAINTENANCE_MODE_GET_TEMPLATE_CONTEXT = None\n```\n\n```python\n# the HTTP status code to send\nMAINTENANCE_MODE_STATUS_CODE = 503\n```\n\n```python\n# the value in seconds of the Retry-After header during maintenance-mode\nMAINTENANCE_MODE_RETRY_AFTER = 3600 # 1 hour\n```\n\n#### Context Processors\nAdd **maintenance_mode.context_processors.maintenance_mode** to your context_processors list in `settings.py` if you want to access the maintenance_mode status in your templates.\n\n```python\nTEMPLATES = [\n    {\n        # ...\n        \"OPTIONS\": {\n            \"context_processors\": [\n                # ...\n                \"maintenance_mode.context_processors.maintenance_mode\",\n                # ...\n            ],\n        },\n        # ...\n    },\n]\n```\n\n#### Logging\nYou can disable emailing 503 errors to admins while maintenance mode is enabled:\n\n```python\nLOGGING = {\n    \"filters\": {\n        \"require_not_maintenance_mode_503\": {\n            \"()\": \"maintenance_mode.logging.RequireNotMaintenanceMode503\",\n        },\n        ...\n    },\n    \"handlers\": {\n        ...\n    },\n    ...\n}\n```\n\n### Context Managers\nYou can force a block of code execution to run under maintenance mode or not using context managers:\n\n```python\nfrom maintenance_mode.core import maintenance_mode_off, maintenance_mode_on\n\nwith maintenance_mode_on():\n    # do stuff\n    pass\n\nwith maintenance_mode_off():\n    # do stuff\n    pass\n```\n\n### URLs\nAdd **maintenance_mode.urls** to `urls.py` if you want superusers able to set maintenance_mode using urls.\n\n```python\nurlpatterns = [\n    # ...\n    re_path(r\"^maintenance-mode/\", include(\"maintenance_mode.urls\")),\n    # ...\n]\n```\n\n### Views\nYou can force maintenance mode on/off at view level using view decorators:\n\n```python\nfrom maintenance_mode.decorators import force_maintenance_mode_off, force_maintenance_mode_on\n\n@force_maintenance_mode_off\ndef my_view_a(request):\n    # never return 503 response\n    pass\n\n@force_maintenance_mode_on\ndef my_view_b(request):\n    # always return 503 response\n    pass\n```\n\n## Usage\n\n### Python\n```python\nfrom maintenance_mode.core import get_maintenance_mode, set_maintenance_mode\n\nset_maintenance_mode(True)\n\nif get_maintenance_mode():\n    set_maintenance_mode(False)\n```\nor\n```python\nfrom django.core.management import call_command\nfrom django.core.management.base import BaseCommand\n\n\nclass Command(BaseCommand):\n\n    def handle(self, *args, **options):\n\n        call_command(\"maintenance_mode\", \"on\")\n\n        # call your command(s)\n\n        call_command(\"maintenance_mode\", \"off\")\n\n```\n\n### Templates\n```html\n{% if maintenance_mode %}\n<!-- html -->\n{% endif %}\n```\n\n### Terminal\n\nRun ``python manage.py maintenance_mode <on|off>``\n\n*(**This is not Heroku-friendly because** any execution of heroku run* `manage.py` *will be run on a separate worker dyno, not the web one. Therefore **the state-file is set but on the wrong machine. You should use a custom*** `MAINTENANCE_MODE_STATE_BACKEND`*.)*\n\n### URLs\nSuperusers can change maintenance-mode using the following urls:\n\n`/maintenance-mode/off/`\n\n`/maintenance-mode/on/`\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-maintenance-mode.git && cd django-maintenance-mode\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-maintenance-mode)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 14
        },
        "discussions": {
          "totalCount": 1
        },
        "nameWithOwner": "fabiocaccamo/django-maintenance-mode",
        "description": ":construction: :hammer_and_wrench: shows a 503 error page when maintenance-mode is on.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/f7df3b0016f18a001fbab2b89191c585b4bea40ed92b5c635c5c99d633ff06be/fabiocaccamo/django-maintenance-mode",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 46,
        "issues": {
          "totalCount": 2
        },
        "stargazerCount": 356,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "HTML"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-extra-settings",
      "repo": {
        "name": "django-extra-settings",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-extra-settings.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-extra-settings?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-extra-settings.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-extra-settings/)\n[![](https://pepy.tech/badge/django-extra-settings/month)](https://pepy.tech/project/django-extra-settings)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-extra-settings?logo=github)](https://github.com/fabiocaccamo/django-extra-settings/stargazers)\n[![](https://img.shields.io/pypi/l/django-extra-settings.svg?color=blue)](https://github.com/fabiocaccamo/django-extra-settings/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-extra-settings/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-extra-settings/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-extra-settings/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-extra-settings)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-extra-settings?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-extra-settings)\n[![](https://img.shields.io/codacy/grade/554c0505ed9844f3865bee975d1b894c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-extra-settings)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-extra-settings?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-extra-settings/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-extra-settings\nconfig and manage typed extra settings using just the django admin.\n\n![](https://user-images.githubusercontent.com/1035294/74425761-81325400-4e54-11ea-9095-3d64e1420bfe.gif)\n\n## Installation\n-   Run `pip install django-extra-settings`\n-   Add `extra_settings` to `settings.INSTALLED_APPS`\n-   Run `python manage.py migrate`\n-   Run `python manage.py collectstatic`\n-   Restart your application server\n-   Just go to the admin where you can `create`, `update` and `delete` your settings.\n\n## Usage\n\n### Settings\nAll these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.\n\n```python\n# the name of the installed app for registering the extra settings admin.\nEXTRA_SETTINGS_ADMIN_APP = \"extra_settings\"\n```\n\n```python\n# the name of the cache to use, if not found the \"default\" cache will be used.\nEXTRA_SETTINGS_CACHE_NAME = \"extra_settings\"\n```\n\n```python\n# a list of settings that will be available by default, each item must contain \"name\", \"type\" and \"value\".\n# check the #types section to see all the supported settings types.\nEXTRA_SETTINGS_DEFAULTS = [\n    {\n        \"name\": \"SETTING_NAME\",\n        \"type\": \"string\",\n        \"value\": \"Hello World\",\n    },\n    # ...\n]\n```\n\n```python\n# if True, settings names will be forced to honor the standard django settings format\nEXTRA_SETTINGS_ENFORCE_UPPERCASE_SETTINGS = True\n```\n\n```python\n# if True, the template tag will fallback to django.conf.settings,\n# very useful to retrieve conf settings such as DEBUG.\nEXTRA_SETTINGS_FALLBACK_TO_CONF_SETTINGS = True\n```\n\n```python\n# the upload_to path value of settings of type 'file'\nEXTRA_SETTINGS_FILE_UPLOAD_TO = \"files\"\n```\n\n```python\n# the upload_to path value of settings of type 'image'\nEXTRA_SETTINGS_IMAGE_UPLOAD_TO = \"images\"\n```\n\n```python\n# if True, settings name prefix list filter will be shown in the admin changelist\nEXTRA_SETTINGS_SHOW_NAME_PREFIX_LIST_FILTER = False\n```\n\n```python\n# if True, settings type list filter will be shown in the admin changelist\nEXTRA_SETTINGS_SHOW_TYPE_LIST_FILTER = False\n```\n\n```python\n# the package name displayed in the admin\nEXTRA_SETTINGS_VERBOSE_NAME = \"Settings\"\n```\n\n### Admin\nYou can display the settings model admin in another installed app group by using the `EXTRA_SETTINGS_ADMIN_APP` setting.\n\nYou can also have a more advanced control, by registering the settings admin with multiple installed apps and filtering each app settings using the `queryset_processor` argument.\n\n> :warning: If you do either of the above, you must run migrations for each app that will display `extra_settings` model admin in its admin *(because django creates migrations even for proxy models)*.\n\n#### Admin advanced configuration example\n\nIn your custom app `photos.admin` module:\n```python\nfrom extra_settings.admin import register_extra_settings_admin\n\nregister_extra_settings_admin(\n    app=__name__,\n    queryset_processor=lambda qs: qs.filter(name__istartswith=\"PHOTOS_\"),\n    unregister_default=True,\n)\n```\n\nIn your custom app `videos.admin` module:\n```python\nfrom extra_settings.admin import register_extra_settings_admin\n\nregister_extra_settings_admin(\n    app=__name__,\n    queryset_processor=lambda qs: qs.filter(name__istartswith=\"VIDEOS_\"),\n    unregister_default=True,\n)\n```\n\nBy default the `\"extra_settings\"` app has its own admin app group.\n\n\n\n### Caching\nYou can customise the app caching options using `settings.CACHES[\"extra_settings\"]` setting, otherwise the `\"default\"` cache will be used:\n\n```python\nCACHES = {\n    # ...\n    \"extra_settings\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"TIMEOUT\": 60,\n    },\n    # ...\n}\n```\n\nBy default the `\"extra_settings\"` cache is used, if you want to use another cache you can set it using the `EXTRA_SETTINGS_CACHE_NAME` setting.\n\n### Python\nYou can **create**, **read**, **update** and **delete** settings programmatically:\n\n#### Types\nThis is the list of the currently supported setting types you may need to use:\n\n-   `Setting.TYPE_BOOL`\n-   `Setting.TYPE_DATE`\n-   `Setting.TYPE_DATETIME`\n-   `Setting.TYPE_DECIMAL`\n-   `Setting.TYPE_DURATION`\n-   `Setting.TYPE_EMAIL`\n-   `Setting.TYPE_FILE`\n-   `Setting.TYPE_FLOAT`\n-   `Setting.TYPE_IMAGE`\n-   `Setting.TYPE_INT`\n-   `Setting.TYPE_JSON`\n-   `Setting.TYPE_STRING`\n-   `Setting.TYPE_TEXT`\n-   `Setting.TYPE_TIME`\n-   `Setting.TYPE_URL`\n\n#### Create\n```python\nfrom extra_settings.models import Setting\n\nsetting_obj = Setting(\n    name=\"SETTING_NAME\",\n    value_type=Setting.TYPE_STRING,\n    value=\"django-extra-settings\",\n)\nsetting_obj.save()\n```\n\n#### Read\n```python\nfrom extra_settings.models import Setting\n\nvalue = Setting.get(\"SETTING_NAME\", default=\"django-extra-settings\")\n```\n\n#### Update\n```python\nfrom extra_settings.models import Setting\n\nsetting_obj = Setting(\n    name=\"SETTING_NAME\",\n    value_type=Setting.TYPE_BOOL,\n    value=True,\n)\nsetting_obj.value = False\nsetting_obj.save()\n```\n\n#### Delete\n```python\nfrom extra_settings.models import Setting\n\nSetting.objects.filter(name=\"SETTING_NAME\").delete()\n```\n\n#### Validators\nYou can define a custom validator for each setting:\n-   Validators must be defined using full python path, eg. `myapp.mymodule.my_validator`.\n-   Validators are called passing a single argument (the value of the setting) and if the value is valid, they should return `True`, otherwise returning `False` or `None` a `ValidationError` is raised.\n\n### Templates\nYou can retrieve settings in templates:\n```html\n{% load extra_settings %}\n\n{% get_setting 'SETTING_NAME' default='django-extra-settings' %}\n```\n\n### Tests\nYou can override specific settings during tests using `extra_settings.test.override_settings`.\n\nIt can be used both as decorator and as context-manager:\n```python\nfrom extra_settings.test import override_settings\n\n# decorator\n@override_settings(SETTING_NAME_1=\"value for testing 1\", SETTING_NAME_2=\"value for testing 2\")\ndef test_with_custom_settings(self):\n    pass\n\n# context manager\ndef test_with_custom_settings(self):\n    with override_settings(SETTING_NAME_1=\"value for testing 1\", SETTING_NAME_2=\"value for testing 2\"):\n        pass\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-extra-settings.git && cd django-extra-settings\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-extra-settings)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 7
        },
        "discussions": {
          "totalCount": 1
        },
        "nameWithOwner": "fabiocaccamo/django-extra-settings",
        "description": ":gear: config and manage typed extra settings using just the django admin.",
        "openGraphImageUrl": "https://repository-images.githubusercontent.com/239991252/34ceb700-5edc-11ea-839a-fb936317c2b1",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 23,
        "issues": {
          "totalCount": 2
        },
        "stargazerCount": 338,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "CSS"
            },
            {
              "name": "JavaScript"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/FCCurrentLocationGeocoder",
      "repo": {
        "name": "FCCurrentLocationGeocoder",
        "object": {
          "text": "FCCurrentLocationGeocoder ![Pod version](http://img.shields.io/cocoapods/v/FCCurrentLocationGeocoder.svg) ![Pod platforms](http://img.shields.io/cocoapods/p/FCCurrentLocationGeocoder.svg) ![Pod license](http://img.shields.io/cocoapods/l/FCCurrentLocationGeocoder.svg)\n=========================\n\niOS Geocoder on top of LocationManager and CLGeocoder for **forward geocode and reverse geocode user's current location** using a block-based syntax.\n\nIt can also be used to **geocode the user's approximate location (always country, almost always city) without asking for permission** (using a free GeoIP service).\n\n## Requirements & Dependecies\n- iOS >= 5.0\n- ARC enabled\n- CoreLocation Framework\n- [FCIPAddressGeocoder](https://github.com/fabiocaccamo/FCIPAddressGeocoder)\n\n## Installation\n\n#### CocoaPods:\n`pod 'FCCurrentLocationGeocoder'`\n\n#### Manual install:\n- Copy `FCCurrentLocationGeocoder.h` and `FCCurrentLocationGeocoder.m` to your project\n- Manual install [FCIPAddressGeocoder](https://github.com/fabiocaccamo/FCIPAddressGeocoder/#manual-install)\n\n## Usage\n\n### iOS 8\nSince iOS 8 it is required to add `NSLocationWhenInUseUsageDescription` key to your `Info.plist` file. Value for this key will be a description of UIAlertView presented to user while asking for location  permission. See [Apple documentation](https://developer.apple.com/library/ios/documentation/corelocation/reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestWhenInUseAuthorization) for more info.\n\nBasically all you need to do is to add single entry in your `Info.plist` file. Add key `NSLocationWhenInUseUsageDescription`, and select type `String`. The value you enter for this entry will be shown as text in UIAlertView presented to user first time you try to determine his location.\nIn the end it should look similar to this:\n\n![Added entry to Info.plist](https://raw.githubusercontent.com/burczyk/FCCurrentLocationGeocoder/ios8-location-permission/assets/Info_plist.png)\n\n### Code sample\n\n\n```objective-c\n//you can use the shared instance\n[FCCurrentLocationGeocoder sharedGeocoder];\n\n//you can also use as many shared instances as you need\n[FCCurrentLocationGeocoder sharedGeocoderForKey:@\"yourKey\"];\n\n//or create a new geocoder and set options\nFCCurrentLocationGeocoder *geocoder = [FCCurrentLocationGeocoder new];\ngeocoder.canPromptForAuthorization = NO; //(optional, default value is YES)\ngeocoder.canUseIPAddressAsFallback = YES; //(optional, default value is NO. very useful if you need just the approximate user location, such as current country, without asking for permission)\ngeocoder.timeFilter = 30; //(cache duration, optional, default value is 5 seconds)\ngeocoder.timeoutErrorDelay = 10; //(optional, default value is 15 seconds)\n\n```\n```objective-c\n//check if location services are enabled and the current app is authorized or could be authorized\n[geocoder canGeocode]; //returns YES or NO\n```\n```objective-c\n//current-location forward-geocoding\n[geocoder geocode:^(BOOL success) {\n\n    if(success)\n    {\n        //you can access the current location using 'geocoder.location'\n    }\n    else {\n        //you can debug what's going wrong using: 'geocoder.error'\n    }\n}];\n```\n```objective-c\n//current-location reverse-geocoding\n[geocoder reverseGeocode:^(BOOL success) {\n\n    if(success)\n    {\n        //you can access the current location using 'geocoder.location'\n        //you can access the current location placemarks using 'geocoder.locationPlacemarks'\n        //you can access the current location first-placemark using 'geocoder.locationPlacemark'\n        //you can access the current location country using 'geocoder.locationCountry'\n        //you can access the current location country-code using 'geocoder.locationCountryCode'\n        //you can access the current location city using 'geocoder.locationCity'\n        //you can access the current location zip-code using 'geocoder.locationZipCode'\n        //you can access the current location address using 'geocoder.locationAddress'\n    }\n    else {\n        //you can debug what's going wrong using: 'geocoder.error'\n    }\n}];\n```\n```objective-c\n//check if geocoding\n[geocoder isGeocoding]; //returns YES or NO\n```\n```objective-c\n//cancel geocoding\n[geocoder cancelGeocode];\n```\n\n## License\nReleased under [MIT License](LICENSE).\n"
        },
        "mentionableUsers": {
          "totalCount": 3
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/FCCurrentLocationGeocoder",
        "description": ":iphone: :round_pushpin: iOS geocoder for forward / reverse geocode user's current location using a block-based syntax.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/c2d8d782ba9795835d8f32a5fe42ddd4dd48bfdaa4941730953bd3893eeaf611/fabiocaccamo/FCCurrentLocationGeocoder",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 38,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 264,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Ruby"
            },
            {
              "name": "Objective-C"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/python-fsutil",
      "repo": {
        "name": "python-fsutil",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/python-fsutil.svg?color=blue&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/python-fsutil.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/python-fsutil/)\n[![](https://pepy.tech/badge/python-fsutil/month)](https://pepy.tech/project/python-fsutil)\n[![](https://img.shields.io/github/stars/fabiocaccamo/python-fsutil?logo=github)](https://github.com/fabiocaccamo/python-fsutil/stargazers)\n[![](https://img.shields.io/pypi/l/python-fsutil.svg?color=blue)](https://github.com/fabiocaccamo/python-fsutil/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/python-fsutil/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/python-fsutil/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/python-fsutil/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/python-fsutil)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/python-fsutil?logo=codecov)](https://codecov.io/gh/fabiocaccamo/python-fsutil)\n[![](https://img.shields.io/codacy/grade/fc40788ae7d74d1fb34a38934113c4e5?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/python-fsutil)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/python-fsutil?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/python-fsutil/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# python-fsutil\nhigh-level file-system operations for lazy devs.\n\n## Installation\n\n```bash\npip install python-fsutil\n```\n\n## Usage\n\nJust import the main module and call its methods.\n\n```python\nimport fsutil\n```\n\n### Methods\n\n-   [`assert_dir`](#assert_dir)\n-   [`assert_exists`](#assert_exists)\n-   [`assert_file`](#assert_file)\n-   [`assert_not_dir`](#assert_not_dir)\n-   [`assert_not_exists`](#assert_not_exists)\n-   [`assert_not_file`](#assert_not_file)\n-   [`clean_dir`](#clean_dir)\n-   [`convert_size_bytes_to_string`](#convert_size_bytes_to_string)\n-   [`convert_size_string_to_bytes`](#convert_size_string_to_bytes)\n-   [`copy_dir`](#copy_dir)\n-   [`copy_dir_content`](#copy_dir_content)\n-   [`copy_file`](#copy_file)\n-   [`create_dir`](#create_dir)\n-   [`create_file`](#create_file)\n-   [`create_zip_file`](#create_zip_file)\n-   [`delete_dir`](#delete_dir)\n-   [`delete_dir_content`](#delete_dir_content)\n-   [`delete_dirs`](#delete_dirs)\n-   [`delete_file`](#delete_file)\n-   [`delete_files`](#delete_files)\n-   [`download_file`](#download_file) *(require `requests` to be installed)*\n-   [`exists`](#exists)\n-   [`extract_zip_file`](#extract_zip_file)\n-   [`get_dir_creation_date`](#get_dir_creation_date)\n-   [`get_dir_creation_date_formatted`](#get_dir_creation_date_formatted)\n-   [`get_dir_hash`](#get_dir_hash)\n-   [`get_dir_last_modified_date`](#get_dir_last_modified_date)\n-   [`get_dir_last_modified_date_formatted`](#get_dir_last_modified_date_formatted)\n-   [`get_dir_size`](#get_dir_size)\n-   [`get_dir_size_formatted`](#get_dir_size_formatted)\n-   [`get_file_basename`](#get_file_basename)\n-   [`get_file_creation_date`](#get_file_creation_date)\n-   [`get_file_creation_date_formatted`](#get_file_creation_date_formatted)\n-   [`get_file_extension`](#get_file_extension)\n-   [`get_file_hash`](#get_file_hash)\n-   [`get_file_last_modified_date`](#get_file_last_modified_date)\n-   [`get_file_last_modified_date_formatted`](#get_file_last_modified_date_formatted)\n-   [`get_file_size`](#get_file_size)\n-   [`get_file_size_formatted`](#get_file_size_formatted)\n-   [`get_filename`](#get_filename)\n-   [`get_parent_dir`](#get_parent_dir)\n-   [`get_unique_name`](#get_unique_name)\n-   [`is_dir`](#is_dir)\n-   [`is_empty`](#is_empty)\n-   [`is_empty_dir`](#is_empty_dir)\n-   [`is_empty_file`](#is_empty_file)\n-   [`is_file`](#is_file)\n-   [`join_filename`](#join_filename)\n-   [`join_filepath`](#join_filepath)\n-   [`join_path`](#join_path)\n-   [`list_dirs`](#list_dirs)\n-   [`list_files`](#list_files)\n-   [`make_dirs`](#make_dirs)\n-   [`make_dirs_for_file`](#make_dirs_for_file)\n-   [`move_dir`](#move_dir)\n-   [`move_file`](#move_file)\n-   [`read_file`](#read_file)\n-   [`read_file_from_url`](#read_file_from_url) *(requires `requests` to be installed)*\n-   [`read_file_json`](#read_file_json)\n-   [`read_file_lines`](#read_file_lines)\n-   [`read_file_lines_count`](#read_file_lines_count)\n-   [`remove_dir`](#remove_dir)\n-   [`remove_dir_content`](#remove_dir_content)\n-   [`remove_dirs`](#remove_dirs)\n-   [`remove_file`](#remove_file)\n-   [`remove_files`](#remove_files)\n-   [`rename_dir`](#rename_dir)\n-   [`rename_file`](#rename_file)\n-   [`rename_file_basename`](#rename_file_basename)\n-   [`rename_file_extension`](#rename_file_extension)\n-   [`replace_dir`](#replace_dir)\n-   [`replace_file`](#replace_file)\n-   [`search_dirs`](#search_dirs)\n-   [`search_files`](#search_files)\n-   [`split_filename`](#split_filename)\n-   [`split_filepath`](#split_filepath)\n-   [`split_path`](#split_path)\n-   [`write_file`](#write_file)\n-   [`write_file_json`](#write_file_json)\n\n\n#### `assert_dir`\n\n```python\n# Raise an OSError if the given path doesn't exist or it is not a directory.\nfsutil.assert_dir(path)\n```\n\n#### `assert_exists`\n\n```python\n# Raise an OSError if the given path doesn't exist.\nfsutil.assert_exists(path)\n```\n\n#### `assert_file`\n\n```python\n# Raise an OSError if the given path doesn't exist or it is not a file.\nfsutil.assert_file(path)\n```\n\n#### `assert_not_dir`\n\n```python\n# Raise an OSError if the given path is an existing directory.\nfsutil.assert_not_dir(path)\n```\n\n#### `assert_not_exists`\n\n```python\n# Raise an OSError if the given path already exists.\nfsutil.assert_not_exists(path)\n```\n\n#### `assert_not_file`\n\n```python\n# Raise an OSError if the given path is an existing file.\nfsutil.assert_not_file(path)\n```\n\n#### `clean_dir`\n\n```python\n# Clean a directory by removing empty sub-directories and/or empty files.\nfsutil.clean_dir(path, dirs=True, files=True)\n```\n\n#### `convert_size_bytes_to_string`\n\n```python\n# Convert the given size bytes to string using the right unit suffix.\nsize_str = fsutil.convert_size_bytes_to_string(size)\n```\n\n#### `convert_size_string_to_bytes`\n\n```python\n# Convert the given size string to bytes.\nsize_bytes = fsutil.convert_size_string_to_bytes(size)\n```\n\n#### `copy_dir`\n\n```python\n# Copy the directory at the given path and all its content to dest path.\n# If overwrite is not allowed and dest path exists, an OSError is raised.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.copytree\nfsutil.copy_dir(path, dest, overwrite=False, **kwargs)\n```\n\n#### `copy_dir_content`\n\n```python\n# Copy the content of the directory at the given path to dest path.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.copytree\nfsutil.copy_dir_content(path, dest, **kwargs)\n```\n\n#### `copy_file`\n\n```python\n# Copy the file at the given path and its metadata to dest path.\n# If overwrite is not allowed and dest path exists, an OSError is raised.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.copy2\nfsutil.copy_file(path, dest, overwrite=False, **kwargs)\n```\n\n#### `create_dir`\n\n```python\n# Create directory at the given path.\n# If overwrite is not allowed and path exists, an OSError is raised.\nfsutil.create_dir(path, overwrite=False)\n```\n\n#### `create_file`\n\n```python\n# Create file with the specified content at the given path.\n# If overwrite is not allowed and path exists, an OSError is raised.\nfsutil.create_file(path, content=\"\", overwrite=False)\n```\n\n#### `create_zip_file`\n\n```python\n# Create zip file at path compressing directories/files listed in content_paths.\n# If overwrite is allowed and dest zip already exists, it will be overwritten.\nfsutil.create_zip_file(path, content_paths, overwrite=True, compression=zipfile.ZIP_DEFLATED)\n```\n\n#### `delete_dir`\n\n```python\n# Alias for remove_dir.\nfsutil.delete_dir(path)\n```\n\n#### `delete_dir_content`\n\n```python\n# Alias for remove_dir_content.\nfsutil.delete_dir_content(path)\n```\n\n#### `delete_dirs`\n\n```python\n# Alias for remove_dirs.\nfsutil.delete_dirs(*paths)\n```\n\n#### `delete_file`\n\n```python\n# Alias for remove_file.\nfsutil.delete_file(path)\n```\n\n#### `delete_files`\n\n```python\n# Alias for remove_files.\nfsutil.delete_files(*paths)\n```\n\n#### `download_file`\n\n```python\n# Download a file from url to the given dirpath and return the filepath.\n# If dirpath is not provided, the file will be downloaded to a temp directory.\n# If filename is provided, the file will be named using filename.\n# It is possible to pass extra request options (eg. for authentication) using **kwargs.\nfilepath = fsutil.download_file(url, dirpath=None, filename=\"archive.zip\", chunk_size=8192, **kwargs)\n```\n\n#### `exists`\n\n```python\n# Check if a directory of a file exists at the given path.\nvalue = fsutil.exists(path)\n```\n\n#### `extract_zip_file`\n\n```python\n# Extract zip file at path to dest path.\n# If autodelete, the archive will be deleted after extraction.\n# If content_paths list is defined, only listed items will be extracted, otherwise all.\nfsutil.extract_zip_file(path, dest, content_paths=None, autodelete=False)\n```\n\n#### `get_dir_creation_date`\n\n```python\n# Get the directory creation date.\ndate = fsutil.get_dir_creation_date(path)\n```\n\n#### `get_dir_creation_date_formatted`\n\n```python\n# Get the directory creation date formatted using the given format.\ndate_str = fsutil.get_dir_creation_date_formatted(path, format='%Y-%m-%d %H:%M:%S')\n```\n\n#### `get_dir_hash`\n\n```python\n# Get the hash of the directory at the given path using\n# the specified algorithm function (md5 by default).\nhash = fsutil.get_dir_hash(path, func=\"md5\")\n```\n\n#### `get_dir_last_modified_date`\n\n```python\n# Get the directory last modification date.\ndate = fsutil.get_dir_last_modified_date(path)\n```\n\n#### `get_dir_last_modified_date_formatted`\n\n```python\n# Get the directory last modification date formatted using the given format.\ndate_str = fsutil.get_dir_last_modified_date_formatted(path, format=\"%Y-%m-%d %H:%M:%S\")\n```\n\n#### `get_dir_size`\n\n```python\n# Get the directory size in bytes.\nsize = fsutil.get_dir_size(path)\n```\n\n#### `get_dir_size_formatted`\n\n```python\n# Get the directory size formatted using the right unit suffix.\nsize_str = fsutil.get_dir_size_formatted(path)\n```\n\n#### `get_file_basename`\n\n```python\n# Get the file basename from the given path/url.\nbasename = fsutil.get_file_basename(path)\n```\n\n#### `get_file_creation_date`\n\n```python\n# Get the file creation date.\ndate = fsutil.get_file_creation_date(path)\n```\n\n#### `get_file_creation_date_formatted`\n\n```python\n# Get the file creation date formatted using the given format.\ndate_str = fsutil.get_file_creation_date_formatted(path, format=\"%Y-%m-%d %H:%M:%S\")\n```\n\n#### `get_file_extension`\n\n```python\n# Get the file extension from the given path/url.\nextension = fsutil.get_file_extension(path)\n```\n\n#### `get_file_hash`\n\n```python\n# Get the hash of the file at the given path using\n# the specified algorithm function (md5 by default).\nfilehash = fsutil.get_file_hash(path, func=\"md5\")\n```\n\n#### `get_file_last_modified_date`\n\n```python\n# Get the file last modification date.\ndate = fsutil.get_file_last_modified_date(path)\n```\n\n#### `get_file_last_modified_date_formatted`\n\n```python\n# Get the file last modification date formatted using the given format.\ndate_str = fsutil.get_file_last_modified_date_formatted(path, format=\"%Y-%m-%d %H:%M:%S\")\n```\n\n#### `get_file_size`\n\n```python\n# Get the file size in bytes.\nsize = fsutil.get_file_size(path)\n```\n\n#### `get_file_size_formatted`\n\n```python\n# Get the file size formatted using the right unit suffix.\nsize_str = fsutil.get_file_size_formatted(path)\n```\n\n#### `get_filename`\n\n```python\n# Get the filename from the given path/url.\nfilename = fsutil.get_filename(path)\n```\n\n#### `get_parent_dir`\n\n```python\n# Get the parent directory for the given path going up N levels.\nparent_dir = fsutil.get_parent_dir(path, levels=1)\n```\n\n#### `get_unique_name`\n\n```python\n# Gets a unique name for a directory/file ath the given directory path.\nunique_name = fsutil.get_unique_name(path, prefix=\"\", suffix=\"\", extension=\"\", separator=\"-\")\n```\n\n#### `is_dir`\n\n```python\n# Determine whether the specified path represents an existing directory.\nvalue = fsutil.is_dir(path)\n```\n\n#### `is_empty`\n\n```python\n# Determine whether the specified path represents an empty directory or an empty file.\nvalue = fsutil.is_empty(path)\n```\n\n#### `is_empty_dir`\n\n```python\n# Determine whether the specified path represents an empty directory.\nvalue = fsutil.is_empty_dir(path)\n```\n\n#### `is_empty_file`\n\n```python\n# Determine whether the specified path represents an empty file.\nvalue = fsutil.is_empty_file(path)\n```\n\n#### `is_file`\n\n```python\n# Determine whether the specified path represents an existing file.\nvalue = fsutil.is_file(path)\n```\n\n#### `join_filename`\n\n```python\n# Create a filename joining the file basename and the extension.\nfilename = fsutil.join_filename(basename, extension)\n```\n\n#### `join_filepath`\n\n```python\n# Create a filepath joining the directory path and the filename.\nfilepath = fsutil.join_filepath(dirpath, filename)\n```\n\n#### `join_path`\n\n```python\n# Create a path joining path and paths.\n# If path is __file__ (or a .py file), the resulting path will be relative\n# to the directory path of the module in which it's used.\npath = fsutil.join_path(path, *paths)\n```\n\n#### `list_dirs`\n\n```python\n# List all directories contained at the given directory path.\ndirs = fsutil.list_dirs(path)\n```\n\n#### `list_files`\n\n```python\n# List all files contained at the given directory path.\nfiles = fsutil.list_files(path)\n```\n\n#### `make_dirs`\n\n```python\n# Create the directories needed to ensure that the given path exists.\n# If a file already exists at the given path an OSError is raised.\nfsutil.make_dirs(path)\n```\n\n#### `make_dirs_for_file`\n\n```python\n# Create the directories needed to ensure that the given path exists.\n# If a directory already exists at the given path an OSError is raised.\nfsutil.make_dirs_for_file(path)\n```\n\n#### `move_dir`\n\n```python\n# Move an existing dir from path to dest directory.\n# If overwrite is not allowed and dest path exists, an OSError is raised.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.move\nfsutil.move_dir(path, dest, overwrite=False, **kwargs)\n```\n\n#### `move_file`\n\n```python\n# Move an existing file from path to dest directory.\n# If overwrite is not allowed and dest path exists, an OSError is raised.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.move\nfsutil.move_file(path, dest, overwrite=False, **kwargs)\n```\n\n#### `read_file`\n\n```python\n# Read the content of the file at the given path using the specified encoding.\ncontent = fsutil.read_file(path, encoding=\"utf-8\")\n```\n\n#### `read_file_from_url`\n\n```python\n# Read the content of the file at the given url.\ncontent = fsutil.read_file_from_url(url, **kwargs)\n```\n\n#### `read_file_json`\n\n```python\n# Read and decode a json encoded file at the given path.\ndata = fsutil.read_file_json(path, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None)\n```\n\n#### `read_file_lines`\n\n```python\n# Read file content lines.\n# It is possible to specify the line indexes (negative indexes too),\n# very useful especially when reading large files.\ncontent = fsutil.read_file_lines(path, line_start=0, line_end=-1, strip_white=True, skip_empty=True, encoding=\"utf-8\")\n```\n\n#### `read_file_lines_count`\n\n```python\n# Read file lines count.\nlines_count = fsutil.read_file_lines_count(path)\n```\n\n#### `remove_dir`\n\n```python\n# Remove a directory at the given path and all its content.\n# If the directory is removed with success returns True, otherwise False.\n# More informations about kwargs supported options here:\n# https://docs.python.org/3/library/shutil.html#shutil.rmtree\nfsutil.remove_dir(path, **kwargs)\n```\n\n#### `remove_dir_content`\n\n```python\n# Removes all directory content (both sub-directories and files).\nfsutil.remove_dir_content(path)\n```\n\n#### `remove_dirs`\n\n```python\n# Remove multiple directories at the given paths and all their content.\nfsutil.remove_dirs(*paths)\n```\n\n#### `remove_file`\n\n```python\n# Remove a file at the given path.\n# If the file is removed with success returns True, otherwise False.\nfsutil.remove_file(path)\n```\n\n#### `remove_files`\n\n```python\n# Remove multiple files at the given paths.\nfsutil.remove_files(*paths)\n```\n\n#### `rename_dir`\n\n```python\n# Rename a directory with the given name.\n# If a directory or a file with the given name already exists, an OSError is raised.\nfsutil.rename_dir(path, name)\n```\n\n#### `rename_file`\n\n```python\n# Rename a file with the given name.\n# If a directory or a file with the given name already exists, an OSError is raised.\nfsutil.rename_file(path, name)\n```\n\n#### `rename_file_basename`\n\n```python\n# Rename a file basename with the given basename.\nfsutil.rename_file_basename(path, basename)\n```\n\n#### `rename_file_extension`\n\n```python\n# Rename a file extension with the given extension.\nfsutil.rename_file_extension(path, extension)\n```\n\n#### `replace_dir`\n\n```python\n# Replace directory at the specified path with the directory located at src.\n# If autodelete, the src directory will be removed at the end of the operation.\n# Optimized for large directories.\nfsutil.replace_dir(path, src, autodelete=False)\n```\n\n#### `replace_file`\n\n```python\n# Replace file at the specified path with the file located at src.\n# If autodelete, the src file will be removed at the end of the operation.\n# Optimized for large files.\nfsutil.replace_file(path, src, autodelete=False)\n```\n\n#### `search_dirs`\n\n```python\n# Search for directories at path matching the given pattern.\ndirs = fsutil.search_dirs(path, pattern=\"**/*\")\n```\n\n#### `search_files`\n\n```python\n# Search for files at path matching the given pattern.\nfiles = fsutil.search_files(path, pattern=\"**/*.*\")\n```\n\n#### `split_filename`\n\n```python\n# Split a filename and returns its basename and extension.\nbasename, extension = fsutil.split_filename(path)\n```\n\n#### `split_filepath`\n\n```python\n# Split a filename and returns its directory-path and filename.\ndirpath, filename = fsutil.split_filepath(path)\n```\n\n#### `split_path`\n\n```python\n# Split a path and returns its path-names.\npath_names = fsutil.split_path(path)\n```\n\n#### `write_file`\n\n```python\n# Write file with the specified content at the given path.\nfsutil.write_file(path, content, append=False, encoding=\"utf-8\")\n```\n\n#### `write_file_json`\n\n```python\n# Write a json file at the given path with the specified data encoded in json format.\nfsutil.write_file_json(path, data, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/python-fsutil.git && cd python-fsutil\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npython -m pip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests using tox\ntox\n\n# or run tests using unittest\npython -m unittest\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/python-fsutil)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations on top of fontTools. 🧢\n"
        },
        "mentionableUsers": {
          "totalCount": 1
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/python-fsutil",
        "description": ":computer: :wrench: high-level file-system operations for lazy devs.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/71590df05d32394cc79e0cedbfe84a963b1439a3797d7e99b6922fd97f2bc6a4/fabiocaccamo/python-fsutil",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 11,
        "issues": {
          "totalCount": 6
        },
        "stargazerCount": 139,
        "pullRequests": {
          "totalCount": 2
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/FCIPAddressGeocoder",
      "repo": {
        "name": "FCIPAddressGeocoder",
        "object": {
          "text": "FCIPAddressGeocoder ![Pod version](http://img.shields.io/cocoapods/v/FCIPAddressGeocoder.svg) ![Pod platforms](http://img.shields.io/cocoapods/p/FCIPAddressGeocoder.svg) ![Pod license](http://img.shields.io/cocoapods/l/FCIPAddressGeocoder.svg)\n===================\n\niOS Geocoder for **geocode device IP Address location using GeoIP service(s)** and a block-based syntax.\n\n## Supported Services\n- [FreeGeoIP](http://freegeoip.net/) - [GitHub](https://github.com/fiorix/freegeoip)\n- [IP-Api](http://ip-api.com/)\n- [IPInfo](https://ipinfo.io/)\n- [IPVigilante](https://ipvigilante.com/)\n- [Nekudo](http://geoip.nekudo.com/)\n- [Petabyet](https://www.petabyet.com/api/)\n- [~~Smart-IP~~](http://smart-ip.net/)\n- [Telize](http://www.telize.com/) *(this service is not free anymore, you can spin up your own instance or subscribe to a paid plan)*\n\n*(feel free to suggest other services to support)*\n\n## Requirements & Dependecies\n- iOS >= 5.0\n- ARC enabled\n- CoreLocation Framework\n\n## Installation\n\n#### CocoaPods:\n`pod 'FCIPAddressGeocoder'`\n\n#### Manual install:\nCopy `FCIPAddressGeocoder.h` and `FCIPAddressGeocoder.m` to your project.\n\n## Usage\n```objective-c\n//the service used by default is FreeGeoIP, but you can set the default service to another one\n//this method will affect the default service/url of all instances, included the shared one\n//if you need to change the default service/url it's recommended to do it application:didFinishLaunching\n[FCIPAddressGeocoder setDefaultService:FCIPAddressGeocoderServiceFreeGeoIP];\n\n//some services like FreeGeoIP are open-source, and you could need to use an instance of it running on your own server\n[FCIPAddressGeocoder setDefaultService:FCIPAddressGeocoderServiceFreeGeoIP andURL:@\"http://127.0.0.1/\"];\n```\n```objective-c\n//you can use the shared instance\nFCIPAddressGeocoder *geocoder = [FCIPAddressGeocoder sharedGeocoder];\n\n//or create a new geocoder\nFCIPAddressGeocoder *geocoder = [FCIPAddressGeocoder new];\n\n//or create a new geocoder which uses a custom instance of the FreeGeoIP service installed on your own server\nFCIPAddressGeocoder *geocoder = [[FCIPAddressGeocoder alloc] initWithService:FCIPAddressGeocoderServiceFreeGeoIP andURL:@\"http://127.0.0.1/\"];\n```\n```objective-c\n//set if the geocoder can use all available services in case of failure of the default one\n//very useful since 3rd party services are not depending by us and could be temporary unavailable or no more active\n//by default this property value is set to YES only if you use the shared geocoder or if you create a geocoder without specifing its service/url\ngeocoder.canUseOtherServicesAsFallback = YES;\n```\n```objective-c\n//IP Address geocoding (geocoding results are cached for 1 minute)\n[geocoder geocode:^(BOOL success) {\n\n    if(success)\n    {\n        //you can access the location info-dictionary containing all informations using 'geocoder.locationInfo'\n        //you can access the location using 'geocoder.location'\n        //you can access the location city using 'geocoder.locationCity' (it could be nil)\n        //you can access the location country using 'geocoder.locationCountry'\n        //you can access the location country-code using 'geocoder.locationCountryCode'\n    }\n    else {\n        //you can debug what's going wrong using: 'geocoder.error'\n    }\n}];\n```\n```objective-c\n//check if geocoding\n[geocoder isGeocoding]; //returns YES or NO\n```\n```objective-c\n//cancel geocoding\n[geocoder cancelGeocode];\n```\n\n## License\nReleased under [MIT License](LICENSE).\n"
        },
        "mentionableUsers": {
          "totalCount": 3
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/FCIPAddressGeocoder",
        "description": ":iphone: :earth_africa: iOS geocoder for geocode device IP Address location using GeoIP service(s) and a block-based syntax.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/d0a9807f50611d357340e6d9ed44aa35a9bd838db19742c327bdb3b7ee5570ff/fabiocaccamo/FCIPAddressGeocoder",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 17,
        "issues": {
          "totalCount": 1
        },
        "stargazerCount": 113,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Objective-C"
            },
            {
              "name": "Ruby"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-freeze",
      "repo": {
        "name": "django-freeze",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-freeze.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-freeze?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-freeze.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-freeze/)\n[![](https://pepy.tech/badge/django-freeze/month)](https://pepy.tech/project/django-freeze)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-freeze?logo=github)](https://github.com/fabiocaccamo/django-freeze/stargazers)\n[![](https://img.shields.io/pypi/l/django-freeze.svg?color=blue)](https://github.com/fabiocaccamo/django-freeze/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-freeze/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-freeze/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-freeze/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-freeze)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-freeze?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-freeze)\n[![](https://img.shields.io/codacy/grade/54187bdf124644189791041589292e1b?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-freeze)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-freeze?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-freeze/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-freeze\ndjango-freeze generates the static version of your django site.\n\nJust run `python manage.py generate_static_site` :)\n\n## Features\n\n- **Generate** the **static version** of your Django site, optionally compressed **.zip file**\n- **Generate/download** the static site using **urls** *(only superuser and staff)*\n- Follow **sitemap.xml** urls\n- Follow **internal links** founded in each page\n- Follow **redirects**\n- **Report** invalid/broken urls\n- Selectively **include/exclude media and static files**\n- Custom **base url** *(very useful if the static site will run in a specific folder different by the document-root)*\n- Convert urls to **relative urls** *(very useful if the static site will run offline or in an unknown folder different by the document-root)*\n- Prevent local directory index\n\n## Installation\n\n- Run `pip install django-freeze`\n- Add `freeze` to `settings.INSTALLED_APPS`\n- Enable the `sites` framework (instructions [here](https://docs.djangoproject.com/en/4.1/ref/contrib/sites/#enabling-the-sites-framework))\n- Restart your application server\n\n## Configuration (optional)\n\nAll these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.\n\n```python\n\n#the absolute path where to store the .zip and the html files\n#default value is a folder named 'freeze' located as sibling of 'settings.MEDIA_ROOT'\nFREEZE_ROOT = '/...'\n\n#tells 'freeze' if the urls should be fetched using https instead of http protocol (only if FREEZE_SITE_URL is not defined)\nFREEZE_USE_HTTPS = False\n\n#the site-url to crawl, if not specified it will be autodetected using the sites app\nFREEZE_SITE_URL = 'http://mydomain.com'\n\n#the base-url for all links relative to root '/'\n#useful if the generated static site will run in a specific folder which is not the document-root\nFREEZE_BASE_URL = None\n\n#if True 'freeze' will convert all absolute urls to relative urls\n#useful if the generated static site will run locally (file://) or in an unknown folder which is not the document-root (only if FREEZE_BASE_URL is not defined)\nFREEZE_RELATIVE_URLS = False\n\n#if True 'freeze' will inject a script at the end of each page\n#which will force hrefs like 'path/' to 'path/index.html' (only if the site is running under file://)\n#useful if the generated static site will run locally (requires FREEZE_RELATIVE_URLS set to True) to prevent local directory index\nFREEZE_LOCAL_URLS = False\n\n#if True 'freeze' will fetch each url founded in sitemap.xml\nFREEZE_FOLLOW_SITEMAP_URLS = True\n\n#if True 'freeze' will follow and fetch recursively each link-url founded in each page\nFREEZE_FOLLOW_HTML_URLS = True\n\n#if true 'freeze' will send an email to managers containing the list of all invalid urls (404, 500, etc..)\nFREEZE_REPORT_INVALID_URLS = False\n\n#the invalid urls email report subject\nFREEZE_REPORT_INVALID_URLS_SUBJECT = '[freeze] invalid urls'\n\n#if True the generated site will contain also the MEDIA folder and ALL its content\nFREEZE_INCLUDE_MEDIA = True\n#elif the value is a list or tuple only the specified directories will be included\nFREEZE_INCLUDE_MEDIA = ('cache', 'images', 'videos', )\n\n#if True the generated site will contain also the STATIC folder and ALL its content\nFREEZE_INCLUDE_STATIC = True\n#elif the value is a list or tuple only the specified directories will be included\nFREEZE_INCLUDE_STATIC = ('myapp1', 'myapp2', 'myapp3', )\n\n#if True the generated site will be zipped, the *.zip file will be created in FREEZE_ROOT\nFREEZE_ZIP_ALL = False\n\n#the name of the zip file created\nFREEZE_ZIP_NAME = 'freeze'\n\n#The request headers to use during the get requests that scrape the site\n#can be used to set Authentication headers, by default sets the user-agent\nFREEZE_REQUEST_HEADERS = {'user-agent': 'django-freeze'}\n```\n\nAdd **freeze.urls** to `urls.py` if you want superusers and staff able to use freeze urls.\n\n```python\nurlpatterns = patterns('',\n    ...\n    url(r'^freeze/', include('freeze.urls')),\n    ...\n)\n```\n\n## Usage\n\n#### Terminal\n\nRun `python manage.py generate_static_site`\n\n#### URLs\nSuperusers and staff can use the following urls to **download a .zip** containing the generated static site or to just generate the static website.\n\n`/freeze/download-static-site/`\n\n`/freeze/generate-static-site/`\n\n*(the time necessary to generate the static site depends on the size of the project)*\n\n## TODO\n- Write tests\n- Add `sitemap.xml` and `robots.txt` to the generated static site\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-extra-settings.git && cd django-extra-settings\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-extra-settings)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 4
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/django-freeze",
        "description": ":ice_cube: convert your dynamic django site to a static one with one line of code.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/4f591c43626311014475034448180286c68a864d5cdde5e9a75d2a3636966d7a/fabiocaccamo/django-freeze",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 15,
        "issues": {
          "totalCount": 3
        },
        "stargazerCount": 85,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "HTML"
            },
            {
              "name": "JavaScript"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/python-codicefiscale",
      "repo": {
        "name": "python-codicefiscale",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/python-codicefiscale.svg?logoColor=white&color=blue&logo=python)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/python-codicefiscale.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/python-codicefiscale/)\n[![](https://pepy.tech/badge/python-codicefiscale/month)](https://pepy.tech/project/python-codicefiscale)\n[![](https://img.shields.io/github/stars/fabiocaccamo/python-codicefiscale?logo=github)](https://github.com/fabiocaccamo/python-codicefiscale/stargazers)\n[![](https://img.shields.io/pypi/l/python-codicefiscale.svg?color=blue&)](https://github.com/fabiocaccamo/python-codicefiscale/blob/main/LICENSE)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/python-codicefiscale/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/python-codicefiscale/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/python-codicefiscale/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/python-codicefiscale)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/python-codicefiscale?logo=codecov)](https://codecov.io/gh/fabiocaccamo/python-codicefiscale)\n[![](https://img.shields.io/codacy/grade/8927f48c9498408f85167da9287edd86?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/python-codicefiscale)\n[![](https://img.shields.io/scrutinizer/quality/g/fabiocaccamo/python-codicefiscale?logo=scrutinizer)](https://scrutinizer-ci.com/g/fabiocaccamo/python-codicefiscale/?branch=main)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/python-codicefiscale?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/python-codicefiscale/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# python-codicefiscale\npython-codicefiscale is a library for encode/decode Italian fiscal code - **codifica/decodifica del Codice Fiscale**.\n\n![Codice Fiscale](https://user-images.githubusercontent.com/1035294/72058207-fa77dd80-32cf-11ea-8995-52324e7d3efe.png)\n\n## Features\n- `NEW` **Auto-updated** data (once a week) directly from **ANPR** data-source.\n- `NEW` **Command Line Interface** available.\n- **Transliteration** for name/surname\n- **Multiple** birthdate formats (date/string) *(you can see all the supported string formats [here](https://github.com/fabiocaccamo/python-codicefiscale/blob/main/tests/tests.py#L73))*\n- **Automatic** birthplace city/foreign-country code detection from name\n- **Omocodia** support\n\n## Installation\n`pip install python-codicefiscale`\n\n## Usage\n\n### Python\n\n#### Import\n```python\nfrom codicefiscale import codicefiscale\n```\n#### Encode\n```python\ncodicefiscale.encode(\n    lastname=\"Caccamo\",\n    firstname=\"Fabio\",\n    gender=\"M\",\n    birthdate=\"03/04/1985\",\n    birthplace=\"Torino\",\n)\n\n# \"CCCFBA85D03L219P\"\n```\n#### Decode\n```python\ncodicefiscale.decode(\"CCCFBA85D03L219P\")\n\n# {\n#     \"code\": \"CCCFBA85D03L219P\",\n#     \"gender\": \"M\",\n#     \"birthdate\": datetime.datetime(1985, 4, 3, 0, 0),\n#     \"birthplace\": {\n#         \"name\": \"TORINO\"\n#         \"province\": \"TO\",\n#         \"code\": \"L219\",\n#     },\n#     \"omocodes\": [\n#         \"CCCFBA85D03L219P\",\n#         \"CCCFBA85D03L21VE\",\n#         \"CCCFBA85D03L2MVP\",\n#         \"CCCFBA85D03LNMVE\",\n#         \"CCCFBA85D0PLNMVA\",\n#         \"CCCFBA85DLPLNMVL\",\n#         \"CCCFBA8RDLPLNMVX\",\n#         \"CCCFBAURDLPLNMVU\",\n#     ],\n#     \"raw\": {\n#         \"code\": \"CCCFBA85D03L219P\",\n#         \"lastname\": \"CCC\",\n#         \"firstname\": \"FBA\",\n#         \"birthdate\": \"85D03\",\n#         \"birthdate_year\": \"85\"\n#         \"birthdate_month\": \"D\",\n#         \"birthdate_day\": \"03\",\n#         \"birthplace\": \"L219\",\n#         \"cin\": \"P\",\n#     },\n# }\n```\n\n#### Check\n```python\ncodicefiscale.is_valid(\"CCCFBA85D03L219P\")\n\n# True\n```\n```python\ncodicefiscale.is_omocode(\"CCCFBA85D03L219P\")\n\n# False\n```\n\n### Command Line\nThis library can be used also as a CLI tool, for more info run:\n```bash\npython -m codicefiscale --help\n```\n\n#### Encode (CLI)\n```bash\npython -m codicefiscale encode --firstname Fabio --lastname Caccamo --gender M --birthdate 03/04/1985 --birthplace Torino\n```\n\n#### Decode (CLI)\n```bash\npython -m codicefiscale decode CCCFBA85D03L219P\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/python-codicefiscale.git && cd python-codicefiscale\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests using tox\ntox\n\n# or run tests using unittest\npython -m unittest tests.tests\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n---\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/python-codicefiscale)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 5
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/python-codicefiscale",
        "description": ":it: :credit_card: italian fiscal codes encoding, decoding and validation - codifica, decodifica e validazione del Codice Fiscale italiano.",
        "openGraphImageUrl": "https://repository-images.githubusercontent.com/106271104/67d9cd78-8248-4d76-96b2-3e2652857c80",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 20,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 60,
        "pullRequests": {
          "totalCount": 2
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/django-redirects",
      "repo": {
        "name": "django-redirects",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/django-redirects.svg?color=3776AB&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-redirects?color=0C4B33&logo=django&logoColor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-redirects.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/django-redirects/)\n[![](https://pepy.tech/badge/django-redirects/month)](https://pepy.tech/project/django-redirects)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-redirects?logo=github)](https://github.com/fabiocaccamo/django-redirects/stargazers)\n[![](https://img.shields.io/pypi/l/django-redirects.svg?color=blue)](https://github.com/fabiocaccamo/django-redirects/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-redirects/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-redirects/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-redirects/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-redirects)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-redirects?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-redirects)\n[![](https://img.shields.io/codacy/grade/6bc31cfdbc2b463b808bd3dc23a44444?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-redirects)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-redirects?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-redirects/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-redirects\n\n**django-redirects** fills the gap of `django.contrib.redirects` offering **redirects with full control**.\n\n## Features\n\n- Sites framework support.\n- Custom redirect type: `301`, `302`, `303`, `307`, `308`.\n- Custom redirect match condition: `EXACT`, `PREFIX` or `REGEX`.\n- Regex support, match and replace groups using group reference: `$1`, `$2`, `$3`, ...\n- Counter to monitor requests count handled by each redirect.\n- Admin integration with list filters and the possibility to test the redirect.\n\n## Installation\n\n- Run `pip install django-redirects`.\n- Add `redirects` to `settings.INSTALLED_APPS`.\n- Add `redirects.middleware.RedirectMiddleware` to `settings.MIDDLEWARE` before other middlewares.\n- Run `python manage.py migrate`.\n- Restart your application server.\n\n## Testing\n\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-redirects.git && cd django-redirects\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## License\n\nReleased under [MIT License](LICENSE.txt).\n\n## Supporting\n\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-redirects)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️\n\n- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 2
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/django-redirects",
        "description": " :arrow_right_hook: :white_check_mark: redirects as they should be, with full control.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/03f20f2d5601f3c55bf1bec93188f4fbd9aec652de09c4ae2452b1d6b4993526/fabiocaccamo/django-redirects",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 2,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 53,
        "pullRequests": {
          "totalCount": 1
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/python-fontbro",
      "repo": {
        "name": "python-fontbro",
        "object": {
          "text": "[![](https://img.shields.io/pypi/pyversions/python-fontbro.svg?color=blue&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/python-fontbro.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/python-fontbro/)\n[![](https://pepy.tech/badge/python-fontbro/month)](https://pepy.tech/project/python-fontbro)\n[![](https://img.shields.io/github/stars/fabiocaccamo/python-fontbro?logo=github)](https://github.com/fabiocaccamo/python-fontbro/stargazers)\n[![](https://img.shields.io/pypi/l/python-fontbro?color=blue)](https://github.com/fabiocaccamo/python-fontbro/blob/main/LICENSE.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/python-fontbro/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/python-fontbro/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/python-fontbro/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/python-fontbro)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/python-fontbro?logo=codecov)](https://codecov.io/gh/fabiocaccamo/python-fontbro)\n[![](https://img.shields.io/codacy/grade/dd3a046db4b14b988a2f1fcfbfaa51eb?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/python-fontbro)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/python-fontbro?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/python-fontbro/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# python-fontbro\nfriendly font operations on top of `fontTools`. :billed_cap:\n\n## Installation\n```bash\npip install python-fontbro\n```\n\n## Usage\nJust import the font class:\n\n```python\nfrom fontbro import Font\n\nfont = Font(\"fonts/MyFont.ttf\")\n```\n\n### Methods\n-   [`clone`](#clone)\n-   [`close`](#close)\n-   [`get_characters`](#get_characters)\n-   [`get_characters_count`](#get_characters_count)\n-   [`get_features`](#get_features)\n-   [`get_features_tags`](#get_features_tags)\n-   [`get_format`](#get_format)\n-   [`get_fingerprint`](#get_fingerprint)\n-   [`get_fingerprint_match`](#get_fingerprint_match)\n-   [`get_glyphs`](#get_glyphs)\n-   [`get_glyphs_count`](#get_glyphs_count)\n-   [`get_image`](#get_image)\n-   [`get_italic_angle`](#get_italic_angle)\n-   [`get_name`](#get_name)\n-   [`get_names`](#get_names)\n-   [`get_style_flag`](#get_style_flag)\n-   [`get_style_flags`](#get_style_flags)\n-   [`get_ttfont`](#get_ttfont)\n-   [`get_unicode_block_by_name`](#get_unicode_block_by_name)\n-   [`get_unicode_blocks`](#get_unicode_blocks)\n-   [`get_unicode_script_by_name`](#get_unicode_script_by_name)\n-   [`get_unicode_scripts`](#get_unicode_scripts)\n-   [`get_variable_axes`](#get_variable_axes)\n-   [`get_variable_axes_tags`](#get_variable_axes_tags)\n-   [`get_variable_axis_by_tag`](#get_variable_axis_by_tag)\n-   [`get_variable_instances`](#get_variable_instances)\n-   [`get_variable_instance_closest_to_coordinates`](#get_variable_instance_closest_to_coordinates)\n-   [`get_version`](#get_version)\n-   [`get_weight`](#get_weight)\n-   [`get_width`](#get_width)\n-   [`is_static`](#is_static)\n-   [`is_variable`](#is_variable)\n-   [`rename`](#rename)\n-   [`save`](#save)\n-   [`save_as_woff`](#save_as_woff)\n-   [`save_as_woff2`](#save_as_woff2)\n-   [`set_name`](#set_name)\n-   [`set_names`](#set_names)\n-   [`set_style_flag`](#set_style_flag)\n-   [`set_style_flags`](#set_style_flags)\n-   [`set_style_flags_by_subfamily_name`](#set_style_flags_by_subfamily_name)\n-   [`subset`](#subset)\n-   [`to_sliced_variable`](#to_sliced_variable)\n-   [`to_static`](#to_static)\n\n#### `clone`\n```python\n\"\"\"\nCreates a new Font instance reading the same binary file.\n\"\"\"\nfont_clone = font.clone()\n```\n\n#### `close`\n```python\n\"\"\"\nClose the wrapped TTFont instance.\n\"\"\"\nfont.close()\n```\n\n#### `get_characters`\n```python\n\"\"\"\nGets the font characters.\n\n:param ignore_blank: If True, characters without contours will not be returned.\n:type ignore_blank: bool\n\n:returns: The characters.\n:rtype: generator of dicts\n\n:raises TypeError: If it's not possible to find the 'best' unicode cmap dict in the font.\n\"\"\"\nchars = font.get_characters(ignore_blank=False)\n```\n\n#### `get_characters_count`\n```python\n\"\"\"\nGets the font characters count.\n\n:param ignore_blank: If True, characters without contours will not be counted.\n:type ignore_blank: bool\n\n:returns: The characters count.\n:rtype: int\n\"\"\"\nchars_count = font.get_characters_count(ignore_blank=False)\n```\n\n#### `get_features`\n```python\n\"\"\"\nGets the font opentype features.\n\n:returns: The features.\n:rtype: list of dict\n\"\"\"\nfeatures = font.get_features()\n```\n\n#### `get_features_tags`\n```python\n\"\"\"\nGets the font opentype features tags.\n\n:returns: The features tags list.\n:rtype: list of str\n\"\"\"\nfeatures_tags = font.get_features_tags()\n```\n\n#### `get_fingerprint`\n```python\n\"\"\"\nGets the font fingerprint: an hash calculated from an image representation of the font.\nChanging the text option affects the returned fingerprint.\n\n:param text: The text used for generating the fingerprint, default value: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".\n:type text: str\n:returns: The fingerprint hash.\n:rtype: imagehash.ImageHash\n\"\"\"\nhash = font.get_fingerprint()\n```\n\n#### `get_fingerprint_match`\n```python\n\"\"\"\nGets the fingerprint match between this font and another one.\nby checking if their fingerprints are equal (difference <= tolerance).\n\n:param other: The other font, can be either a filepath or a Font instance.\n:type other: str or Font\n:param tolerance: The diff tolerance, default 3.\n:type tolerance: int\n:param text: The text used for generating the fingerprint, default value: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".\n:type text: str\n:returns: A tuple containing the match info (match, diff, hash, other_hash).\n:rtype: tuple\n\"\"\"\nmatch, diff, hash, other_hash = font.get_fingerprint_match(other=\"other_font.ttf\", tolerance=10)\n```\n\n#### `get_format`\n```python\n\"\"\"\nGets the font format: otf, ttf, woff, woff2.\n\n:param ignore_flavor: If True, the original format without compression will be returned.\n:type ignore_flavor: bool\n\n:returns: The format.\n:rtype: str or None\n\"\"\"\nformat = font.get_format(ignore_flavor=False)\n```\n\n#### `get_glyphs`\n```python\n\"\"\"\nGets the font glyphs and their own composition.\n\n:returns: The glyphs.\n:rtype: generator of dicts\n\"\"\"\nglyphs = font.get_glyphs()\n```\n\n#### `get_glyphs_count`\n```python\n\"\"\"\nGets the font glyphs count.\n\n:returns: The glyphs count.\n:rtype: int\n\"\"\"\nglyphs_count = font.get_glyphs_count()\n```\n\n#### `get_image`\n```python\n\"\"\"\nGets an image representation of the font rendering\nsome text using the given options.\n\n:param text: The text rendered in the image\n:type text: str\n:param size: The font size\n:type size: int\n:param color: The text color\n:type color: tuple\n:param background_color: The background color\n:type background_color: tuple\n\"\"\"\nimg = font.get_image(text=\"Hello!\", size=48, color=(0, 0, 0, 255), background_color=(255, 255, 255, 255))\n```\n\n#### `get_italic_angle`\n```python\n\"\"\"\nGets the font italic angle.\n\n:returns: The angle value including backslant, italic and roman flags.\n:rtype: dict or None\n\"\"\"\nitalic_angle = font.get_italic_angle()\n```\n\n#### `get_name`\n```python\n\"\"\"\nGets the name by its identifier from the font name table.\n\n:param key: The name id or key (eg. \"family_name\")\n:type key: int or str\n\n:returns: The name.\n:rtype: str or None\n\n:raises KeyError: if the key is not a valid name key/id\n\"\"\"\nfamily_name = font.get_name(key=Font.NAME_FAMILY_NAME)\n```\n\n#### `get_names`\n```python\n\"\"\"\nGets the names records mapped by their property name.\n\n:returns: The names.\n:rtype: dict\n\"\"\"\nnames = font.get_names()\n```\n\n#### `get_style_flag`\n```python\n\"\"\"\nGets the style flag reading OS/2 and macStyle tables.\n\n:param key: The key\n:type key: string\n\n:returns: The style flag.\n:rtype: bool\n\"\"\"\nflag = font.get_style_flag(Font.STYLE_FLAG_BOLD)\n```\n\n#### `get_style_flags`\n```python\n\"\"\"\nGets the style flags reading OS/2 and macStyle tables.\n\n:returns: The dict representing the style flags.\n:rtype: dict\n\"\"\"\nflags = font.get_style_flags()\n```\n\n#### `get_ttfont`\n```python\n\"\"\"\nGets the wrapped TTFont instance.\n\n:returns: The TTFont instance.\n:rtype: TTFont\n\"\"\"\nttfont = font.get_ttfont()\n```\n\n#### `get_unicode_block_by_name`\n```python\n\"\"\"\nGets the unicode block by name (name is case-insensitive and ignores \"-\").\n\n:param name: The name\n:type name: str\n\n:returns: The unicode block dict if the name is valid, None otherwise.\n:rtype: dict or None\n\"\"\"\nblock = font.get_unicode_block_by_name(name=\"Basic Latin\")\n```\n\n#### `get_unicode_blocks`\n```python\n\"\"\"\nGets the unicode blocks and their coverage.\nOnly blocks with coverage >= coverage_threshold (0.0 <= coverage_threshold <= 1.0) will be returned.\n\n:param coverage_threshold: The minumum required coverage for a block to be returned.\n:type coverage_threshold: float\n\n:returns: The list of unicode blocks.\n:rtype: list of dicts\n\"\"\"\nblocks = font.get_unicode_blocks(coverage_threshold=0.00001)\n```\n\n#### `get_unicode_script_by_name`\n```python\n\"\"\"\nGets the unicode script by name/tag (name/tag is case-insensitive and ignores \"-\").\n\n:param name: The name\n:type name: str\n\n:returns: The unicode script dict if the name/tag is valid, None otherwise.\n:rtype: dict or None\n\"\"\"\nscript = font.get_unicode_script_by_name(name=\"Latn\")\n```\n\n#### `get_unicode_scripts`\n```python\n\"\"\"\nGets the unicode scripts and their coverage.\nOnly scripts with coverage >= coverage_threshold (0.0 <= coverage_threshold <= 1.0) will be returned.\n\n:param coverage_threshold: The minumum required coverage for a script to be returned.\n:type coverage_threshold: float\n\n:returns: The list of unicode scripts.\n:rtype: list of dicts\n\"\"\"\nscripts = font.get_unicode_scripts(coverage_threshold=0.00001)\n```\n\n#### `get_variable_axes`\n```python\n\"\"\"\nGets the font variable axes.\n\n:returns: The list of axes if the font is a variable font otherwise None.\n:rtype: list of dict or None\n\"\"\"\naxes = font.get_variable_axes()\n```\n\n#### `get_variable_axes_tags`\n```python\n\"\"\"\nGets the variable axes tags.\n\n:returns: The variable axis tags.\n:rtype: list or None\n\"\"\"\naxes_tags = font.get_variable_axes_tags()\n```\n\n#### `get_variable_axis_by_tag`\n```python\n\"\"\"\nGets a variable axis by tag.\n\n:param tag: The tag\n:type tag: string\n\n:returns: The variable axis by tag.\n:rtype: dict or None\n\"\"\"\naxis = font.get_variable_axis_by_tag(tag=\"wght\")\n```\n\n#### `get_variable_instances`\n```python\n\"\"\"\nGets the variable instances.\n\n:returns: The list of instances if the font is a variable font otherwise None.\n:rtype: list of dict or None\n\"\"\"\ninstances = font.get_variable_instances()\n```\n\n#### `get_variable_instance_closest_to_coordinates`\n```python\n\"\"\"\nGets the variable instance closest to coordinates.\neg. coordinates = {\"wght\": 1000, \"slnt\": 815, \"wdth\": 775}\n\n:param coordinates: The coordinates\n:type coordinates: dict\n\n:returns: The variable instance closest to coordinates.\n:rtype: dict or None\n\"\"\"\ninstance = font.get_variable_instance_closest_to_coordinates(coordinates={\"wght\": 1000, \"slnt\": 815, \"wdth\": 775})\n```\n\n#### `get_version`\n```python\n\"\"\"\nGets the font version.\n\n:returns: The font version value.\n:rtype: float\n\"\"\"\nversion = font.get_version()\n```\n\n#### `get_weight`\n```python\n\"\"\"\nGets the font weight value and name.\n\n:returns: The weight name and value.\n:rtype: dict or None\n\"\"\"\nweight = font.get_weight()\n```\n\n#### `get_width`\n```python\n\"\"\"\nGets the font width value and name.\n\n:returns: The width name and value.\n:rtype: dict or None\n\"\"\"\nwidth = font.get_width()\n```\n\n#### `is_static`\n```python\n\"\"\"\nDetermines if the font is a static font.\n\n:returns: True if static font, False otherwise.\n:rtype: bool\n\"\"\"\nstatic = font.is_static()\n```\n\n#### `is_variable`\n```python\n\"\"\"\nDetermines if the font is a variable font.\n\n:returns: True if variable font, False otherwise.\n:rtype: bool\n\"\"\"\nvariable = font.is_variable()\n```\n\n#### `rename`\n```python\n\"\"\"\nRenames the font names records (1, 2, 4, 6, 16, 17) according to\nthe given family_name and style_name (subfamily_name).\n\nIf family_name is not defined it will be auto-detected.\nIf style_name is not defined it will be auto-detected.\n\n:param family_name: The family name\n:type family_name: str\n:param style_name: The style name\n:type style_name: str\n:param style_flags: if True the style flags will be updated by subfamily name\n:type style_flags: bool\n\n:raises ValueError: if the computed PostScript-name is longer than 63 characters.\n\"\"\"\nfont.rename(family_name=\"My Font New\", style_name=\"Bold Italic\")\n```\n\n#### `save`\n```python\n\"\"\"\nSaves the font at filepath.\n\n:param filepath: The filepath, if None the source filepath will be used\n:type filepath: str or None\n:param overwrite: The overwrite, if True the source font file can be overwritten\n:type overwrite: bool\n\n:returns: The filepath where the font has been saved to.\n:rtype: str\n\n:raises ValueError: If the filepath is the same of the source font and overwrite is not allowed.\n\"\"\"\nsaved_font_path = font.save(filepath=None, overwrite=False)\n```\n\n#### `save_as_woff`\n```python\n\"\"\"\nSaves font as woff.\n\n:param filepath: The filepath\n:type filepath: str\n:param overwrite: The overwrite, if True the source font file can be overwritten\n:type overwrite: bool\n\n:returns: The filepath where the font has been saved to.\n:rtype: str\n\"\"\"\nsaved_font_path = font.save_as_woff(filepath=None, overwrite=True)\n```\n\n#### `save_as_woff2`\n```python\n\"\"\"\nSaves font as woff2.\n\n:param filepath: The filepath\n:type filepath: str\n:param overwrite: The overwrite, if True the source font file can be overwritten\n:type overwrite: bool\n\n:returns: The filepath where the font has been saved to.\n:rtype: str\n\"\"\"\nsaved_font_path = font.save_as_woff2(filepath=None, overwrite=True)\n```\n\n#### `set_name`\n```python\n\"\"\"\nSets the name by its identifier in the font name table.\n\n:param key: The name id or key (eg. \"family_name\")\n:type key: int or str\n:param value: The value\n:type value: str\n\"\"\"\nfont.set_name(Font.NAME_FAMILY_NAME, \"Family Name Renamed\")\n```\n\n#### `set_names`\n```python\n\"\"\"\nSets the names by their identifier in the name table.\n\n:param names: The names\n:type names: dict\n\"\"\"\nfont.set_names(names={\n    Font.NAME_FAMILY_NAME: \"Family Name Renamed\",\n    Font.NAME_SUBFAMILY_NAME: \"Regular Renamed\",\n})\n```\n\n#### `set_style_flag`\n```python\n\"\"\"\nSets the style flag.\n\n:param key: The flag key\n:type key: str\n:param value: The value\n:type value: bool\n\"\"\"\nfont.set_style_flag(Font.STYLE_FLAG_BOLD, True)\n```\n\n#### `set_style_flags`\n```python\n\"\"\"\nSets the style flags, flags set to None will be ignored.\n\n:param bold: The bold flag value.\n:type bold: bool or None\n:param italic: The italic flag value.\n:type italic: bool or None\n:param underline: The underline flag value.\n:type underline: bool or None\n:param outline: The outline flag value.\n:type outline: bool or None\n\"\"\"\nfont.set_style_flags(regular=None, bold=None, italic=None, outline=None, underline=None)\n```\n\n#### `set_style_flags_by_subfamily_name`\n```python\n\"\"\"\nSets the style flags by the subfamily name value.\nThe subfamily values should be \"regular\", \"italic\", \"bold\" or \"bold italic\"\nto allow this method to work properly.\n\"\"\"\nfont.set_style_flags_by_subfamily_name()\n```\n\n#### `subset`\n```python\n\"\"\"\nSubsets the font using the given options (unicodes or glyphs or text),\nit is possible to pass also subsetter options, more info here:\nhttps://github.com/fonttools/fonttools/blob/main/Lib/fontTools/subset/__init__.py\n\n:param unicodes: The unicodes\n:type unicodes: str or list\n:param glyphs: The glyphs\n:type glyphs: list\n:param text: The text\n:type text: str\n:param options: The subsetter options\n:type options: dict\n\"\"\"\nfont.subset(unicodes=\"\", glyphs=[], text=\"\", **options)\n```\n\n#### `to_sliced_variable`\n```python\n\"\"\"\nConverts the variable font to a partial one slicing the variable axes at the given coordinates.\nIf an axis value is not specified, the axis will be left untouched.\nIf an axis min and max values are equal, the axis will be pinned.\n\n:param coordinates: The coordinates dictionary, each item value must be tuple/list/dict\n    (with 'min', 'default' and 'max' keys) for slicing or float/int for pinning, eg.\n    {'wdth':100, 'wght':(100,600), 'ital':(30,65,70)} or\n    {'wdth':100, 'wght':[100,600], 'ital':[30,65,70]} or\n    {'wdth':100, 'wght':{'min':100,'max':600}, 'ital':{'min':30,'default':65,'max':70}}\n:type coordinates: dict\n:param options: The options for the fontTools.varLib.instancer\n:type options: dictionary\n\n:raises TypeError: If the font is not a variable font\n:raises ValueError: If the coordinates are not defined (empty)\n:raises ValueError: If the coordinates axes are all pinned\n\"\"\"\nfont.to_sliced_variable(coordinates, **options)\n```\n\n#### `to_static`\n```python\n\"\"\"\nConverts the variable font to a static one pinning the variable axes at the given coordinates.\nIf an axis value is not specified, the axis will be pinned at its default value.\nIf coordinates are not specified each axis will be pinned at its default value.\n\n:param coordinates: The coordinates, eg. {\"wght\":500, \"ital\":50}\n:type coordinates: dict or None\n:param options: The options for the fontTools.varLib.instancer\n:type options: dictionary\n\n:raises TypeError: If the font is not a variable font\n:raises ValueError: If the coordinates axes are not all pinned\n\"\"\"\nfont.to_static(coordinates=None, **options)\n```\n\n## Testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/python-fontbro.git && cd python-fontbro\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npython -m pip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests using tox\ntox\n\n# or run tests using unittest\npython -m unittest\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n## Credits\nSpecial thanks to [Jérémie Hornus](https://github.com/JeremieHornus) and [Just Van Rossum](https://github.com/justvanrossum).\n\n## Supporting\n- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/python-fontbro)\n- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)\n- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)\n\n## See also\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟‍♂️\n"
        },
        "mentionableUsers": {
          "totalCount": 2
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/python-fontbro",
        "description": ":billed_cap: friendly font operations on top of fontTools.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/9f418664cd13e92ac4eca12df64033eb482ffc1620093dd0fbda32fc9d6c7084/fabiocaccamo/python-fontbro",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 2,
        "issues": {
          "totalCount": 2
        },
        "stargazerCount": 40,
        "pullRequests": {
          "totalCount": 2
        },
        "languages": {
          "nodes": [
            {
              "name": "Python"
            },
            {
              "name": "Shell"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/utils.js",
      "repo": {
        "name": "utils.js",
        "object": {
          "text": "[![](https://img.shields.io/npm/v/@fabiocaccamo/utils.js?color=blue&logo=npm)](https://www.npmjs.com/package/@fabiocaccamo/utils.js)\n[![](https://img.shields.io/npm/dt/@fabiocaccamo/utils.js?color=blue)](https://www.npmjs.com/package/@fabiocaccamo/utils.js)\n[![](https://img.shields.io/github/stars/fabiocaccamo/utils.js?color=blue&logo=github&logoColor=white&style=flat)](https://github.com/fabiocaccamo/utils.js/stargazers)\n[![](https://img.shields.io/bundlephobia/min/@fabiocaccamo/utils.js?color=blue)](https://www.npmjs.com/package/@fabiocaccamo/utils.js)\n[![](https://img.shields.io/bundlephobia/minzip/@fabiocaccamo/utils.js?color=blue)](https://www.npmjs.com/package/@fabiocaccamo/utils.js)\n[![](https://img.shields.io/github/license/fabiocaccamo/utils.js.svg?color=blue)](https://github.com/fabiocaccamo/utils.js/blob/main/README.md)\n\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/utils.js/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/utils.js/actions/workflows/test-package.yml)\n[![](https://codecov.io/gh/fabiocaccamo/utils.js/branch/main/graph/badge.svg)](https://codecov.io/gh/fabiocaccamo/utils.js)\n[![](https://api.codacy.com/project/badge/Grade/6bc3162a50224b518ed7dc366535b3ba)](https://www.codacy.com/app/fabiocaccamo/utils.js)\n\n# utils.js\n\n👷 🔧 zero dependencies vanilla JavaScript utils.\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [APIs](#apis)\n- [Development](#development)\n- [Security](#security)\n- [License](#license)\n\n## Installation\n\nThis library is available through [npm](https://www.npmjs.com/package/@fabiocaccamo/utils.js):\n\n`npm install @fabiocaccamo/utils.js`\n\n## Usage\n\n### CDN\n\n```html\n<script src=\" https://cdn.jsdelivr.net/npm/@fabiocaccamo/utils.js/dist/utils.min.js\"></script>\n```\n\n### Local\n\n```html\n<script src=\"node_modules/@fabiocaccamo/utils.js/dist/utils.min.js\"></script>\n```\n\n### Node\n\n```JavaScript\nvar utils = require(\"@fabiocaccamo/utils.js\");\n```\n\n## APIs\n\n<details><summary><code>utils.array</code></summary>\n<p>\n\n-   `all`\n\n-   `any`\n\n-   `clean`\n\n-   `clone`\n\n-   `contains`\n\n-   `equals`\n\n-   `flatten`\n\n-   `index`\n\n-   `insert`\n\n-   `max`\n\n-   `min`\n\n-   `paginate`\n\n-   `reduce`\n\n-   `remove`\n\n-   `replace`\n\n-   `rotate`\n\n-   `shuffle`\n\n-   `sort`\n\n-   `sum`\n\n-   `unique`\n\n-   `unzip`\n\n-   `zip`\n</p>\n</details>\n\n<details><summary><code>utils.base64</code></summary>\n<p>\n\n-   `decode`\n\n-   `encode`\n</p>\n</details>\n\n<details><summary><code>utils.color</code></summary>\n<p>\n\n-   `cmykToHex`\n\n-   `cmykToRgb`\n\n-   `hexToCmyk`\n\n-   `hexToRgb`\n\n-   `rgbToCmyk`\n\n-   `rgbToHex`\n</p>\n</details>\n\n<details><summary><code>utils.color.cmyk</code></summary>\n<p>\n\n-   `toString`\n\n-   `toStringCSS`\n</p>\n</details>\n\n<details><summary><code>utils.color.hex</code></summary>\n<p>\n\n-   `average`\n\n-   `distance`\n\n-   `gradient`\n\n-   `gradientMatrix`\n\n-   `interpolateBilinear`\n\n-   `interpolateLinear`\n\n-   `interpolateMultilinear`\n\n-   `nearest`\n\n-   `toCmyk`\n\n-   `toRgb`\n\n-   `toString`\n\n-   `toStringCSS`\n</p>\n</details>\n\n<details><summary><code>utils.color.rgb</code></summary>\n<p>\n\n-   `average`\n\n-   `distance`\n\n-   `gradient`\n\n-   `gradientMatrix`\n\n-   `interpolateBilinear`\n\n-   `interpolateLinear`\n\n-   `interpolateMultilinear`\n\n-   `nearest`\n\n-   `toCmyk`\n\n-   `toRgb`\n\n-   `toString`\n\n-   `toStringCSS`\n</p>\n</details>\n\n<details><summary><code>utils.date</code></summary>\n<p>\n\n-   `clone`\n\n-   `constrain`\n\n-   `format`\n\n-   `isFuture`\n\n-   `isPast`\n\n-   `max`\n\n-   `min`\n\n-   `parse`\n\n-   `timestamp`\n\n-   `today`\n\n-   `tomorrow`\n\n-   `yesterday`\n\n-   `yyyymmdd`\n</p>\n</details>\n\n<details><summary><code>utils.ease</code></summary>\n<p>\n\n-   `backIn`\n\n-   `backInOut`\n\n-   `backOut`\n\n-   `bounceIn`\n\n-   `bounceInOut`\n\n-   `bounceOut`\n\n-   `circularIn`\n\n-   `circularInOut`\n\n-   `circularOut`\n\n-   `cubicIn`\n\n-   `cubicInOut`\n\n-   `cubicOut`\n\n-   `elasticIn`\n\n-   `elasticInOut`\n\n-   `elasticOut`\n\n-   `exponentialIn`\n\n-   `exponentialInOut`\n\n-   `exponentialOut`\n\n-   `none`\n\n-   `quadraticIn`\n\n-   `quadraticInOut`\n\n-   `quadraticOut`\n\n-   `quarticIn`\n\n-   `quarticInOut`\n\n-   `quarticOut`\n\n-   `quinticIn`\n\n-   `quinticInOut`\n\n-   `quinticOut`\n\n-   `sexticIn`\n\n-   `sexticInOut`\n\n-   `sexticOut`\n\n-   `sineIn`\n\n-   `sineInOut`\n\n-   `sineOut`\n\n-   `waveCosine`\n\n-   `waveSawtooth`\n\n-   `waveSine`\n</p>\n</details>\n\n<details><summary><code>utils.func</code></summary>\n<p>\n\n-   `args`\n\n-   `attempt`\n\n-   `bind`\n\n-   `call`\n\n-   `debounce`\n\n-   `delay`\n\n-   `memoize`\n\n-   `noop`\n\n-   `repeat`\n\n-   `throttle`\n\n-   `until`\n\n-   `validate`\n</p>\n</details>\n\n<details><summary><code>utils.geom</code></summary>\n<p>\n</p>\n</details>\n\n<details><summary><code>utils.geom.point</code></summary>\n<p>\n\n-   `add`\n\n-   `angle`\n\n-   `cross`\n\n-   `distance`\n\n-   `dot`\n\n-   `equals`\n\n-   `interpolate`\n\n-   `length`\n\n-   `magnitude`\n\n-   `project`\n\n-   `rect`\n\n-   `rotate`\n\n-   `scale`\n\n-   `subtract`\n\n-   `translate`\n</p>\n</details>\n\n<details><summary><code>utils.hex</code></summary>\n<p>\n\n-   `decodeInt`\n\n-   `encodeInt`\n</p>\n</details>\n\n<details><summary><code>utils.json</code></summary>\n<p>\n\n-   `decode`\n\n-   `encode`\n</p>\n</details>\n\n<details><summary><code>utils.math</code></summary>\n<p>\n\n-   `average`\n\n-   `constrain`\n\n-   `cycle`\n\n-   `equals`\n\n-   `euclideanDistance`\n\n-   `factorial`\n\n-   `gcd`\n\n-   `lcm`\n\n-   `lerp`\n\n-   `map`\n\n-   `nearest`\n\n-   `normalize`\n\n-   `proportion`\n\n-   `roundDecimals`\n\n-   `roundToMultiple`\n\n-   `roundToNearest`\n\n-   `roundToPower`\n\n-   `sign`\n\n-   `summation`\n</p>\n</details>\n\n<details><summary><code>utils.math.interpolation</code></summary>\n<p>\n\n-   `bilinear`\n\n-   `linear`\n\n-   `multilinear`\n\n-   `scalar`\n</p>\n</details>\n\n<details><summary><code>utils.number</code></summary>\n<p>\n\n-   `isBetween`\n\n-   `isEven`\n\n-   `isFloat`\n\n-   `isNegative`\n\n-   `isOdd`\n\n-   `isPositive`\n\n-   `isPrime`\n</p>\n</details>\n\n<details><summary><code>utils.object</code></summary>\n<p>\n\n-   `assign`\n\n-   `clean`\n\n-   `clone`\n\n-   `decodeBase64`\n\n-   `decodeJSON`\n\n-   `decodeParameters`\n\n-   `encodeBase64`\n\n-   `encodeJSON`\n\n-   `encodeParameters`\n\n-   `equals`\n\n-   `is`\n\n-   `keypath`\n\n-   `keys`\n\n-   `length`\n\n-   `map`\n\n-   `merge`\n\n-   `search`\n\n-   `values`\n</p>\n</details>\n\n<details><summary><code>utils.random</code></summary>\n<p>\n\n-   `argument`\n\n-   `bit`\n\n-   `boolean`\n\n-   `color`\n\n-   `element`\n\n-   `float`\n\n-   `index`\n\n-   `integer`\n\n-   `map`\n\n-   `sign`\n\n-   `string`\n</p>\n</details>\n\n<details><summary><code>utils.string</code></summary>\n<p>\n\n-   `contains`\n\n-   `endsWith`\n\n-   `icontains`\n\n-   `levenshteinDistance`\n\n-   `levenshteinSimilarity`\n\n-   `padLeft`\n\n-   `padRight`\n\n-   `padZeros`\n\n-   `render`\n\n-   `replace`\n\n-   `reverse`\n\n-   `rotate`\n\n-   `slugify`\n\n-   `startsWith`\n\n-   `toConstantCase`\n\n-   `toRandomCase`\n\n-   `toTitleCase`\n\n-   `toUpperCaseFirst`\n\n-   `trim`\n\n-   `trimLeft`\n\n-   `trimRight`\n</p>\n</details>\n\n<details><summary><code>utils.test</code></summary>\n<p>\n\n-   `assertArray`\n\n-   `assertBase64`\n\n-   `assertBoolean`\n\n-   `assertDate`\n\n-   `assertEqual`\n\n-   `assertError`\n\n-   `assertFalse`\n\n-   `assertFunction`\n\n-   `assertJSON`\n\n-   `assertNaN`\n\n-   `assertNone`\n\n-   `assertNotArray`\n\n-   `assertNotBase64`\n\n-   `assertNotBoolean`\n\n-   `assertNotDate`\n\n-   `assertNotEqual`\n\n-   `assertNotError`\n\n-   `assertNotFunction`\n\n-   `assertNotJSON`\n\n-   `assertNotNone`\n\n-   `assertNotNull`\n\n-   `assertNotNumber`\n\n-   `assertNotObject`\n\n-   `assertNotRegExp`\n\n-   `assertNotString`\n\n-   `assertNotUndefined`\n\n-   `assertNull`\n\n-   `assertNumber`\n\n-   `assertNumberAlmostEqual`\n\n-   `assertObject`\n\n-   `assertRegExp`\n\n-   `assertString`\n\n-   `assertThrows`\n\n-   `assertTrue`\n\n-   `assertUndefined`\n</p>\n</details>\n\n<details><summary><code>utils.trigo</code></summary>\n<p>\n\n-   `acosDeg`\n\n-   `angleDeg`\n\n-   `angleRad`\n\n-   `asinDeg`\n\n-   `atan2Deg`\n\n-   `atanDeg`\n\n-   `cosDeg`\n\n-   `cycleDeg`\n\n-   `degToRad`\n\n-   `fastDeg`\n\n-   `haversine`\n\n-   `hypo`\n\n-   `radToDeg`\n\n-   `sinDeg`\n\n-   `tanDeg`\n</p>\n</details>\n\n<details><summary><code>utils.type</code></summary>\n<p>\n\n-   `isArray`\n\n-   `isBase64`\n\n-   `isBoolean`\n\n-   `isDate`\n\n-   `isError`\n\n-   `isFunction`\n\n-   `isJSON`\n\n-   `isNaN`\n\n-   `isNone`\n\n-   `isNull`\n\n-   `isNumber`\n\n-   `isObject`\n\n-   `isRegExp`\n\n-   `isString`\n\n-   `isType`\n\n-   `isUndefined`\n\n-   `of`\n</p>\n</details>\n\n<details><summary><code>utils.url</code></summary>\n<p>\n\n-   `getParameterByName`\n\n-   `getParameters`\n\n-   `getParametersDict`\n\n-   `getParametersList`\n\n-   `getParametersString`\n\n-   `getURL`\n\n-   `hasParameter`\n\n-   `isFile`\n\n-   `isHttp`\n\n-   `isHttps`\n\n-   `isLocalhost`\n</p>\n</details>\n\n<details><summary><code>utils.utf8</code></summary>\n<p>\n\n-   `decode`\n\n-   `encode`\n</p>\n</details>\n\n<details><summary><code>utils.xml</code></summary>\n<p>\n\n-   `removeNamespaces`\n</p>\n</details>\n\n## Development\n\n### Setup\n\n-   `git clone https://github.com/fabiocaccamo/utils.js.git`\n-   `npm install`\n\n### Watch\n\n-   `npm run watch`\n\n### Testing\n\n-   `npm run test` _(run tests against dist using [`Gulp`](https://gulpjs.com/) task runner and [`Mocha`](https://mochajs.org/) Javascript testing framework)_\n\n### Formatting\n\n-   `npm run format` _(format code using [`Prettier`](https://prettier.io/) code formatter, refer to [.prettierrc](./.prettierrc) for specific formatting options)_\n\n### Build\n\n-   `npm run build`\n\n## Security\n\nRefer to [SECURITY.md](./SECURITY.md)\n\n## License\n\nReleased under [MIT License](https://github.com/fabiocaccamo/utils.js/blob/main/LICENSE.txt).\n"
        },
        "mentionableUsers": {
          "totalCount": 2
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/utils.js",
        "description": ":construction_worker: :wrench: zero dependencies vanilla JavaScript utils.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/f160f377bb93008f187f737178b93f324aa7d49ac0eb3c2583015a876cf3ac4c/fabiocaccamo/utils.js",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 5,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 17,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "JavaScript"
            }
          ]
        }
      }
    },
    {
      "url": "https://github.com/fabiocaccamo/create-matrix-action",
      "repo": {
        "name": "create-matrix-action",
        "object": {
          "text": "[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/create-matrix-action/test-action.yaml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/create-matrix-action)\n[![](https://img.shields.io/github/stars/fabiocaccamo/create-matrix-action?logo=github)](https://github.com/fabiocaccamo/create-matrix-action/stargazers)\n[![](https://img.shields.io/github/sponsors/fabiocaccamo?color=blueviolet&logo=github)](https://github.com/sponsors/fabiocaccamo)\n[![](https://img.shields.io/twitter/follow/fabiocaccamo)](https://twitter.com/fabiocaccamo)\n\n\n# create-matrix-action\n\nThis action creates a non-square matrix from parsing a matrix configuration declared in the workflow file.\n\nI wrote this action for my python/django testing needs, but it is very flexible and scalable, so it can be used in many other contexts.\n\n## Matrix configuration\n\nExample:\n```\npython-version {2.7}, django-version {1.7,1.8,1.9,1.10,1.11}, database {sqlite,mysql,postgres}\npython-version {3.6}, django-version {1.8,1.9,1.10,1.11,2.0,2.1,2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\npython-version {3.7}, django-version {2.0,2.1,2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\npython-version {3.8}, django-version {2.2,3.0,3.1,3.2,4.0,4.1}, database {sqlite,mysql,postgres}\npython-version {3.9}, django-version {2.2,3.0,3.1,3.2,4.0,4.1}, database {sqlite,mysql,postgres}\npython-version {3.10}, django-version {3.2,4.0,4.1}, database {sqlite,mysql,postgres}\npython-version {3.11}, django-version {4.1}, database {sqlite,mysql,postgres}\n```\n\n> **Note:** *In the above example, `python-version`, `django-version` and `database` are just the matrix variable names that we can access in the following step, so it is possible to name these variables as needed.*\n\n## Workflow\n\nExample:\n```yaml\n# ...\n\njobs:\n\n  prepare:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Create matrix\n        id: create_matrix\n        uses: ./\n        with:\n          matrix: |\n            python-version {2.7}, django-version {1.7,1.8,1.9,1.10,1.11}, database {sqlite,mysql,postgres}\n            python-version {3.6}, django-version {1.8,1.9,1.10,1.11,2.0,2.1,2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\n            python-version {3.7}, django-version {2.0,2.1,2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\n            python-version {3.8}, django-version {2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\n            python-version {3.9}, django-version {2.2,3.0,3.1,3.2}, database {sqlite,mysql,postgres}\n            python-version {3.10}, django-version {3.2,4.0}, database {sqlite,mysql,postgres}\n\n    outputs:\n      matrix: ${{ steps.create_matrix.outputs.matrix }}\n\n  test:\n\n    needs: prepare\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include: ${{fromJson(needs.prepare.outputs.matrix)}}\n\n    # ...\n\n    steps:\n\n      # ...\n\n      - name: Debug matrix\n        run: |\n          echo \"Python ${{ matrix.python-version }} + Django ${{ matrix.django-version }} + Database ${{ matrix.database }}\"\n```\n\nCheck the full [test-action.yaml](https://github.com/fabiocaccamo/create-matrix-action/blob/main/.github/workflows/test-action.yaml) workflow file.\n\n---\n\n## License\nReleased under [MIT License](LICENSE).\n"
        },
        "mentionableUsers": {
          "totalCount": 1
        },
        "discussions": {
          "totalCount": 0
        },
        "nameWithOwner": "fabiocaccamo/create-matrix-action",
        "description": ":test_tube: :boom: GitHub action that creates a non-square matrix parsing a readable config.",
        "openGraphImageUrl": "https://opengraph.githubassets.com/693618aa7c9dad442434a1e631d2cfb825c57996d7f61e294af33d19715208f0/fabiocaccamo/create-matrix-action",
        "owner": {
          "avatarUrl": "https://avatars.githubusercontent.com/u/1035294?u=5b4b0d50e583c7a4b970f30b65272e95c549b0fb&v=4",
          "login": "fabiocaccamo"
        },
        "forkCount": 1,
        "issues": {
          "totalCount": 0
        },
        "stargazerCount": 8,
        "pullRequests": {
          "totalCount": 0
        },
        "languages": {
          "nodes": [
            {
              "name": "Dockerfile"
            },
            {
              "name": "Python"
            }
          ]
        }
      }
    }
  ]
]